<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>线偶的IT笔记</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/</link><description>线偶的IT笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>297872913@qq.com (ooooo-youwillsee)</managingEditor><webMaster>297872913@qq.com (ooooo-youwillsee)</webMaster><lastBuildDate>Tue, 01 Aug 2023 08:00:00 +0800</lastBuildDate><atom:link href="https://ooooo-youwillsee.github.io/ooooo-notes/index.xml" rel="self" type="application/rss+xml"/><item><title>github 上使用 goreleaser</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/github-%E4%B8%8A%E4%BD%BF%E7%94%A8-goreleaser/</link><pubDate>Tue, 01 Aug 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/github-%E4%B8%8A%E4%BD%BF%E7%94%A8-goreleaser/</guid><description>1. goreleaser 的简单说明 1 2 3 4 5 6 7 8 9 # install goreleaser brew install goreleaser # init goreleaser, create .goreleaser.yml goreleaser init # available commands goreleaser build --clean goreleaser release --snapshot --clean 2. .goreleaser.yml 示例文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25</description></item><item><title>protocols</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/protocols/</link><pubDate>Mon, 31 Jul 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/protocols/</guid><description>websocket</description></item><item><title>使用 netty 的注意点</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E4%BD%BF%E7%94%A8-netty-%E7%9A%84%E6%B3%A8%E6%84%8F%E7%82%B9/</link><pubDate>Sun, 30 Jul 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E4%BD%BF%E7%94%A8-netty-%E7%9A%84%E6%B3%A8%E6%84%8F%E7%82%B9/</guid><description>1. HttpHelloWorldServerHandler 为啥需要使用 SimpleChannelInboundHandler ? HttpObject 的子类有 LastHttpContent, HttpContent, HttpData， 它需要手动调用 release()。</description></item><item><title>rocketmq 的 LitePullConsumer 使用</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/rocketmq-%E7%9A%84-litepullconsumer-%E4%BD%BF%E7%94%A8/</link><pubDate>Fri, 07 Jul 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/rocketmq-%E7%9A%84-litepullconsumer-%E4%BD%BF%E7%94%A8/</guid><description>1. 代码 在自定义封装 MQ 时，要注意 producer 和 consumer 的初始化时机，否则会出现 consumer 占用 consumerQueue 的情况 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33</description></item><item><title>dubbo3 多注册中心的小 bug</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/dubbo3-%E5%A4%9A%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E7%9A%84%E5%B0%8Fbug/</link><pubDate>Mon, 03 Jul 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/dubbo3-%E5%A4%9A%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E7%9A%84%E5%B0%8Fbug/</guid><description>1. 配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 dubbo: application: parameters: registry-type: service registries: a: address: nacos://172.16.1.104:7848 group: DUBBO_SERVICE_GROUP parameters: namespace: a b: address: nacos://172.16.1.104:7848 group: DUBBO_SERVICE_GROUP parameters: namespace: b 2. 问题 只会注册到一个 namespace 中 3. github dubbo issue</description></item><item><title>mybatis-plus 的自定义 mapper</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/mybatis-plus-%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89-mapper/</link><pubDate>Thu, 08 Jun 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/mybatis-plus-%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89-mapper/</guid><description>1. 问题 在真实的使用过程中，可能不同的 mapper 接口使用的 sqlSessionFactory 不一样。就比如下面这个例子。 1 2 3 4 5 6 7 8 9 // 这个注解虽然可以指定 sqlSessionFactory, 但是最终使用的 configuration 对象</description></item><item><title>安装 harbor</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%AE%89%E8%A3%85-harbor/</link><pubDate>Fri, 02 Jun 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%AE%89%E8%A3%85-harbor/</guid><description>1. 在 docker 上安装 harbor 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63</description></item><item><title>nacos 集群用 nginx 代理问题</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/nacos-%E9%9B%86%E7%BE%A4%E7%94%A8-nginx-%E4%BB%A3%E7%90%86%E9%97%AE%E9%A2%98/</link><pubDate>Thu, 01 Jun 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/nacos-%E9%9B%86%E7%BE%A4%E7%94%A8-nginx-%E4%BB%A3%E7%90%86%E9%97%AE%E9%A2%98/</guid><description>1. nacos 的端口 nacos 的 http 端口为 8848，但是 nacos2.0 之后使用 grpc 端口, 而且是偏移量计算的，所以使用 nginx 代理就有坑。 对于 spring 来说, 可以配置多个地址 1 2 3 4 spring: cloud: nacos: server-addr:</description></item><item><title>github page 图片无法访问</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/github-page-%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE/</link><pubDate>Sat, 27 May 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/github-page-%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE/</guid><description>我在 chrome 安装了 SwitchyOmega 代理插件，导致资源加载有问题。 检查 clash 代理，刷新 dns 配置，试试全局代理 可以增加 SwitchyOmega 配置</description></item><item><title>tcpdump 常用命令</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/tcpdump-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link><pubDate>Wed, 24 May 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/tcpdump-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid><description>-n 以数字显示 -X 显示包体 -i 指定网卡 -w 写入文件 -c 包的个数 1. 指定端口 1 tcpdump -n -X -i any port 1234 -w 1.cap 2. 指定主机 1 tcpdump -n -X -i any host 192.168.0.101 -w 1.cap 3. 其他 1 2 3 4 5 6 7 8 # 监视</description></item></channel></rss>