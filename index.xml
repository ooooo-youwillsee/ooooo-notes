<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>线偶的IT笔记</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/</link><description>线偶的IT笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>297872913@qq.com (ooooo-youwillsee)</managingEditor><webMaster>297872913@qq.com (ooooo-youwillsee)</webMaster><lastBuildDate>Sat, 28 Jan 2023 08:00:00 +0800</lastBuildDate><atom:link href="https://ooooo-youwillsee.github.io/ooooo-notes/index.xml" rel="self" type="application/rss+xml"/><item><title>mysql 间隙锁</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/mysql-%E9%97%B4%E9%9A%99%E9%94%81/</link><pubDate>Sat, 28 Jan 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/mysql-%E9%97%B4%E9%9A%99%E9%94%81/</guid><description>1. 准备数据 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # create new schema create schema test; use test; # create table test create table user ( id int primary key, age int ); alter table user add index age_idx (age); # insert some test data insert into user values (3, 10), (5, 20), (8,</description></item><item><title>docker 存储驱动</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/docker-%E5%AD%98%E5%82%A8%E9%A9%B1%E5%8A%A8/</link><pubDate>Tue, 24 Jan 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/docker-%E5%AD%98%E5%82%A8%E9%A9%B1%E5%8A%A8/</guid><description>1. aufs 存储驱动 Ubuntu 22.04 LTS 不支持 aufs 文件系统 参考： ubuntu官方文档 2. overlay2 存储驱动 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # creat dir mkdir lower upper work mnt # mount lower upper work to mnt mount -t overlay -o</description></item><item><title>docker 单主机网络</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/docker-%E5%8D%95%E4%B8%BB%E6%9C%BA%E7%BD%91%E8%B7%AF/</link><pubDate>Fri, 20 Jan 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/docker-%E5%8D%95%E4%B8%BB%E6%9C%BA%E7%BD%91%E8%B7%AF/</guid><description>这篇文章主要简述 docker 中的 bridge 网络驱动是如何工作的。 1. 测试一，veth1 (ns1) &amp;mdash; veth2 (ns2) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 # create ns1,</description></item><item><title>2023年学习计划</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/2023%E5%B9%B4%E8%AE%A1%E5%88%92/</link><pubDate>Sun, 01 Jan 2023 09:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/2023%E5%B9%B4%E8%AE%A1%E5%88%92/</guid><description>0、持续学习者 Talk is cheap. Show me the code. 英语比编程简单。 学习和实践要平衡。 学会和时间做朋友。 学会投资，学会理财。 学会先做减法，再做加法。 学英语很重要，学</description></item><item><title>搭建 istio 源码调试环境</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%90%AD%E5%BB%BA-istio-%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/</link><pubDate>Mon, 19 Dec 2022 09:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%90%AD%E5%BB%BA-istio-%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/</guid><description>1. 前置条件 安装 docker，必须配置 docker 代理，否则 build 失败。 参考 下载 istio 源码。 安装 go 和 dlv 工具。参考 2. 设置环境变量 1 2 3 4 5 6 7 8 # docker 地址 export HUB=&amp;#34;docker.io/youwillsee&amp;#34; # istio 的</description></item><item><title>设置 docker 代理</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E8%AE%BE%E7%BD%AE-docker-%E4%BB%A3%E7%90%86/</link><pubDate>Sun, 18 Dec 2022 09:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E8%AE%BE%E7%BD%AE-docker-%E4%BB%A3%E7%90%86/</guid><description><![CDATA[1. 配置 docker 代理 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # 创建配置目录 mkdir -p /etc/systemd/system/docker.service.d # 创建配置文件 vim /etc/systemd/system/docker.service.d/http-proxy.conf # 配置文件内容 [Service] Environment=&#34;HTTP_PROXY=http://ooooo:10800&#34; Environment=&#34;HTTPS_PROXY=http://ooooo:10800&#34; # 重启 docker systemctl daemon-reload &amp;&amp; systemctl restart docker # 查看配置是否生效]]></description></item><item><title>在 java 中使用 CAS 来实现队列</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%9C%A8-java-%E4%B8%AD%E4%BD%BF%E7%94%A8-cas-%E6%9D%A5%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</link><pubDate>Wed, 16 Nov 2022 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%9C%A8-java-%E4%B8%AD%E4%BD%BF%E7%94%A8-cas-%E6%9D%A5%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</guid><description>1. 实现队列 代码： 使用 head 和 tail 来实现单链表 单链表涉及到两个节点，每次都要判断中间状态 这里使用的是 AtomicReference 来实现的，也可以使用 unsafe 来实现，有兴趣的可以尝试</description></item><item><title>在 java 中使用 Lock 来实现 Semaphore</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%9C%A8-java-%E4%B8%AD%E4%BD%BF%E7%94%A8-lock-%E6%9D%A5%E5%AE%9E%E7%8E%B0-semaphore/</link><pubDate>Mon, 14 Nov 2022 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%9C%A8-java-%E4%B8%AD%E4%BD%BF%E7%94%A8-lock-%E6%9D%A5%E5%AE%9E%E7%8E%B0-semaphore/</guid><description>1. 使用 Lock 来实现 Semaphore 代码： Semaphore 的功能就是允许同时有几个线程操作 acquire 方法，permit 会减一，如果为 0，则线程需要等待 release 方法，permit 会加一，唤醒</description></item><item><title>在 java 中使用 CAS 来实现栈2</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%9C%A8-java-%E4%B8%AD%E4%BD%BF%E7%94%A8-cas-%E6%9D%A5%E5%AE%9E%E7%8E%B0%E6%A0%882/</link><pubDate>Sun, 13 Nov 2022 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%9C%A8-java-%E4%B8%AD%E4%BD%BF%E7%94%A8-cas-%E6%9D%A5%E5%AE%9E%E7%8E%B0%E6%A0%882/</guid><description>1. 使用数组来实现栈 代码： 用数组来实现 用 CTL 来控制 测试类，参考 ConcurrentStackUsingArrayTest 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 public class ConcurrentStackUsingArray&amp;lt;E&amp;gt;</description></item><item><title>在 java 中如何进行多线程测试</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%9C%A8-java-%E4%B8%AD%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%B5%8B%E8%AF%95/</link><pubDate>Sat, 12 Nov 2022 09:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%9C%A8-java-%E4%B8%AD%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%B5%8B%E8%AF%95/</guid><description>1. java 多线程测试 在任何语言中，多线程测试都是比较困难的，在这里我介绍下 java 的多线程测试 jcstress. jcstress 是 OpenJDK 提供的一个测试多线程的框架 主要由多个 Actor 来构成，每个</description></item></channel></rss>