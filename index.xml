<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>线偶的IT笔记</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/</link><description>线偶的IT笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>297872913@qq.com (ooooo-youwillsee)</managingEditor><webMaster>297872913@qq.com (ooooo-youwillsee)</webMaster><lastBuildDate>Mon, 11 Sep 2023 08:00:00 +0800</lastBuildDate><atom:link href="https://ooooo-youwillsee.github.io/ooooo-notes/index.xml" rel="self" type="application/rss+xml"/><item><title>源码分析 nacos 发布配置</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-nacos-%E5%8F%91%E5%B8%83%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 11 Sep 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-nacos-%E5%8F%91%E5%B8%83%E9%85%8D%E7%BD%AE/</guid><description>在 nacos 中，发布配置分为 http 和 grpc 两种方式，分别为</description></item><item><title>源码分析 nacos 同步服务和实例元数据信息</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-nacos-%E5%90%8C%E6%AD%A5%E6%9C%8D%E5%8A%A1%E5%92%8C%E5%AE%9E%E4%BE%8B%E5%85%83%E6%95%B0%E6%8D%AE%E4%BF%A1%E6%81%AF/</link><pubDate>Sat, 09 Sep 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-nacos-%E5%90%8C%E6%AD%A5%E6%9C%8D%E5%8A%A1%E5%92%8C%E5%AE%9E%E4%BE%8B%E5%85%83%E6%95%B0%E6%8D%AE%E4%BF%A1%E6%81%AF/</guid><description>在 nacos 中，手动创建 service，更新 service，删除 service，更新 instance，都是通过 raft 协议来实现的，所以来简单介绍下。 service 元</description></item><item><title>raft 协议重新设置 ip</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/raft-%E5%8D%8F%E8%AE%AE%E9%87%8D%E6%96%B0%E8%AE%BE%E7%BD%AE-ip/</link><pubDate>Fri, 08 Sep 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/raft-%E5%8D%8F%E8%AE%AE%E9%87%8D%E6%96%B0%E8%AE%BE%E7%BD%AE-ip/</guid><description>raft 节点在机器ip变动之后，可能出现选主不成功的问题。 解决方法 下面是 nacos 的 JRaft 解决方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30</description></item><item><title>源码分析 nacos CP 协议 Raft</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-nacos-cp-%E5%8D%8F%E8%AE%AE-raft/</link><pubDate>Wed, 06 Sep 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-nacos-cp-%E5%8D%8F%E8%AE%AE-raft/</guid><description>raft 协议的初始化 源码位置: com.alibaba.nacos.core.distributed.raft.JRaftProtocol#init 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 @Override public void init(RaftConfig config) {</description></item><item><title>源码分析 nacos 集群成员管理</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-nacos-%E9%9B%86%E7%BE%A4%E6%88%90%E5%91%98%E7%AE%A1%E7%90%86/</link><pubDate>Tue, 05 Sep 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-nacos-%E9%9B%86%E7%BE%A4%E6%88%90%E5%91%98%E7%AE%A1%E7%90%86/</guid><description>在 nacos 中，集群成员分为静态加载和动态加载，静态加载就是读取 cluster.conf 文件，动态加载就是从一个接口中获取。 集群成员加载的入口 源码位置: com.alibaba.nacos.core.cluster.ServerMemberManager#initAndStartLookup 1 2 3 4 5 6 7 8</description></item><item><title>源码分析 nacos AP 协议 Distro</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-nacos-ap-%E5%8D%8F%E8%AE%AE-distro/</link><pubDate>Tue, 29 Aug 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-nacos-ap-%E5%8D%8F%E8%AE%AE-distro/</guid><description>nacos 基于 2.2.4 版本 nacos 对于临时实例注册，采用的是 AP 协议，我们看看是怎么设计的。 DistroProtocol 初始化 源码位置: com.alibaba.nacos.core.distributed.distro.DistroProtocol#DistroProtocol 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // DistroProtocol 构</description></item><item><title>源码分析 nacos 连接管理</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-nacos-%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 28 Aug 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-nacos-%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86/</guid><description>nacos 基于 2.2.4 版本 nacos 基于 grpc 的长连接来实现 client 和 server 的通信。 在有多个 server 端时，最初开始 client 的连接会均匀分布在 server 端，当重新上线 server 时，这时候 client 的连接会偏移到其他</description></item><item><title>源码分析 nacos client 订阅服务</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-nacos-client-%E8%AE%A2%E9%98%85%E6%9C%8D%E5%8A%A1/</link><pubDate>Sun, 27 Aug 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-nacos-client-%E8%AE%A2%E9%98%85%E6%9C%8D%E5%8A%A1/</guid><description>nacos 基于 2.2.4 版本 这里的 client 是指 nacos SDK，也就是模块 nacos-client. 订阅服务的主流程 源码位置: com.alibaba.nacos.client.naming.NacosNamingService#subscribe 1 2 3 4 5 6 7 8 9 10 11 12 13 // NacosNamingService 订阅服务 @Override public void subscribe(String serviceName, String groupName, List&amp;lt;String&amp;gt; clusters, EventListener listener) throws NacosException {</description></item><item><title>源码分析 nacos client 注销实例</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-nacos-client-%E6%B3%A8%E9%94%80%E5%AE%9E%E4%BE%8B/</link><pubDate>Sat, 26 Aug 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-nacos-client-%E6%B3%A8%E9%94%80%E5%AE%9E%E4%BE%8B/</guid><description>nacos 基于 2.2.4 版本 这里的 client 是指 nacos SDK，也就是模块 nacos-client. 注销实例的主流程 源码位置: com.alibaba.nacos.client.naming.NacosNamingService#deregisterInstance 1 2 3 4 5 6 // 入口类: NacosNamingService @Override public void deregisterInstance(String serviceName, String groupName, Instance instance) throws NacosException { // clientProxy 的实现类为 NamingClientProxyDelegate clientProxy.deregisterService(serviceName,</description></item><item><title>源码分析 nacos client 注册实例</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-nacos-client-%E6%B3%A8%E5%86%8C%E5%AE%9E%E4%BE%8B/</link><pubDate>Fri, 25 Aug 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-nacos-client-%E6%B3%A8%E5%86%8C%E5%AE%9E%E4%BE%8B/</guid><description>nacos 基于 2.2.4 版本 这里的 client 是指 nacos SDK，也就是模块 nacos-client. 注册实例的主流程 源码位置: com.alibaba.nacos.client.naming.NacosNamingService 1 2 3 4 5 6 7 8 // NacosNamingService 注册实例，最后由 NamingClientProxyDelegate 来注册。 @Override public void registerInstance(String serviceName, String groupName, Instance instance) throws</description></item></channel></rss>