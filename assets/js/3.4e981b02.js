(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{379:function(t,s,a){t.exports=a.p+"assets/img/08_01.914653a9.png"},380:function(t,s,a){t.exports=a.p+"assets/img/08_02.c49b7cf7.png"},381:function(t,s,a){t.exports=a.p+"assets/img/08_03.daace480.png"},382:function(t,s,a){t.exports=a.p+"assets/img/08_04.44be4cba.png"},383:function(t,s,a){t.exports=a.p+"assets/img/08_05.5d8d9dfe.png"},384:function(t,s,a){t.exports=a.p+"assets/img/08_06.157731b3.png"},385:function(t,s,a){t.exports=a.p+"assets/img/08_07.9b8fe7cf.png"},386:function(t,s,a){t.exports=a.p+"assets/img/08_08.34280b55.png"},387:function(t,s,a){t.exports=a.p+"assets/img/08_09.af707973.png"},457:function(t,s,a){"use strict";a.r(s);var n=a(40),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"_1、事务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、事务"}},[t._v("#")]),t._v(" 1、事务")]),t._v(" "),n("blockquote",[n("p",[t._v("在"),n("RouterLink",{attrs:{to:"/pages/notes/geektime/mysql-45/03.html"}},[t._v("第 3 篇")]),t._v("文章和你讲事务隔离级别的时候提到过，如果是可重复读隔离级别，事务 T 启动的时候会创建一个视图 read-view，之后事务 T 执行期间，即使有其他事务修改了数据，事务 T 看到的仍然跟在启动时看到的一样。")],1)]),t._v(" "),n("p",[t._v("例子：")]),t._v(" "),n("div",{staticClass:"language-shell script extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("mysql"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" CREATE TABLE "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("t"),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(" int"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" NOT NULL,\n  "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("k"),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(" int"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" DEFAULT NULL,\n  PRIMARY KEY "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("ENGINE")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("InnoDB"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ninsert into t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id, k"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" values"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1,1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(","),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2,2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[n("img",{attrs:{src:a(379),alt:"事务执行流程"}})]),t._v(" "),n("p",[t._v("在可重复读隔离级别下，"),n("code",[t._v("begin/start transaction")]),t._v(" 并不是事务的起点，只有执行到第一个语句时才会真正启动事务。如果你想要马上启动一个事务，可以使用 "),n("code",[t._v("start transaction with consistent snapshot")]),t._v(" 这个命令。")]),t._v(" "),n("p",[t._v("在这个例子中，事务 C 没有显式地使用 "),n("code",[t._v("begin/commit")]),t._v(" ，表示这个 update 语句本身就是一个事务，语句完成的时候会自动提交。")]),t._v(" "),n("p",[n("strong",[t._v("结果是事务 B 的 k 值为 3，事务A的 k 值为 1。")])]),t._v(" "),n("p",[t._v('在 MySQL 里，有两个"视图"的概念:')]),t._v(" "),n("ul",[n("li",[t._v("一个是 view，它是一个用查询语句定义的虚拟表。")]),t._v(" "),n("li",[t._v("另一个是 InnoDB 在实现 MVCC 时用到的一致性读视图，即 consistent read view。")])]),t._v(" "),n("h2",{attrs:{id:"_2、-快照-怎么工作的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、-快照-怎么工作的"}},[t._v("#")]),t._v(' 2、"快照"怎么工作的')]),t._v(" "),n("p",[t._v('在可重复读隔离级别下，事务在启动的时候就"拍了个快照"。这个快照是基于整库的。')]),t._v(" "),n("p",[t._v("InnoDB 里面每个事务有一个唯一的事务 ID，叫作 "),n("strong",[t._v("transaction id")]),t._v(" 。它是在事务开始的时候向 InnoDB 的事务系统申请的，是按申请顺序严格递增的。")]),t._v(" "),n("p",[t._v("而每行数据也都是有多个版本的。每次事务更新数据的时候，都会生成一个新的数据版本，并且把"),n("strong",[t._v("transaction id")]),t._v("赋值给这个数据版本的事务 ID，记为 "),n("strong",[t._v("row trx_id")]),t._v("。也就是说，表中的一行记录，其实可能有多个版本(row)，每个版本有自己的 "),n("strong",[t._v("row trx_id")]),t._v("。")]),t._v(" "),n("p",[t._v("一个记录被多个事务连续更新后的状态:")]),t._v(" "),n("p",[n("img",{attrs:{src:a(380),alt:"记录被连续更新后的状态"}})]),t._v(" "),n("p",[t._v("图中虚线框里是同一行数据的4个版本，当前最新版本是 V4，k 的值是 22，它是被"),n("strong",[t._v("transaction id")]),t._v(" 为 25 的事务更新的，因此它的 "),n("strong",[t._v("row trx_id")]),t._v(" 也是 25。")]),t._v(" "),n("p",[t._v("图中三个虚线箭头，就是 "),n("strong",[t._v("undo log")]),t._v("，而 V1、V2、V3 并不是物理上真实存在的，而是每次需要的时候根据当前版本和 "),n("strong",[t._v("undo log")]),t._v(" 计算出来的。")]),t._v(" "),n("p",[t._v('一个事务只需要在启动的时候声明说，"以我启动的时刻为准，如果一个数据版本是在我启动之前生成的，就认；如果是我启动以后才生成的，我就不认，我必须要找到它的上一个版本"。如果"上一个版本"也不可见，那就得继续往前找。')]),t._v(" "),n("p",[t._v("在实现上， InnoDB 为每个事务构造了一个数组，用来保存这个事务启动瞬间，当前正在 "),n("strong",[t._v("活跃")]),t._v(" (启动了但还没提交)的所有事务 ID。")]),t._v(" "),n("p",[n("strong",[t._v("数组里面事务 ID 的最小值记为低水位，当前系统里面已经创建过的事务 ID 的最大值加1记为高水位。")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(381),alt:"数据版本可见性规则"}})]),t._v(" "),n("p",[t._v("对于一个数据版本的 row trx_id, 有以下几种可能：")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("如果落在绿色部分，表示这个版本是已提交的事务或者是当前事务自己生成的，这个数据是可见的；")])]),t._v(" "),n("li",[n("p",[t._v("如果落在红色部分，表示这个版本是由将来启动的事务生成的，是肯定不可见的；")])]),t._v(" "),n("li",[n("p",[t._v("如果落在黄色部分，那就包括两种情况")]),t._v(" "),n("p",[t._v("a. 若 row trx_id 在数组中，表示这个版本是由还没提交的事务生成的，不可见；")]),t._v(" "),n("p",[t._v("b. 若 row trx_id 不在数组中，表示这个版本是已经提交了的事务生成的，可见。")])])]),t._v(" "),n("p",[t._v("分析下图 1 中的三个事务，事务 A 为什么是 k=1 ？")]),t._v(" "),n("p",[t._v("假设：")]),t._v(" "),n("ol",[n("li",[t._v("事务A开始前，系统里面只有一个活跃事务 ID 是 99；")]),t._v(" "),n("li",[t._v("事务 A、B、C 的版本号分别是 100、101、102，且当前系统里只有这四个事务；")]),t._v(" "),n("li",[t._v("三个事务开始前，(1,1）这一行数据的 row trx_id是 90。")])]),t._v(" "),n("p",[t._v("这样，事务 A 的视图数组就是 [99,100] , 事务B的视图数组是 [99,100,101], 事务C的视图数组是 [99,100,101,102]。")]),t._v(" "),n("p",[t._v("事务A查询逻辑有关的操作:")]),t._v(" "),n("p",[n("img",{attrs:{src:a(382),alt:"事务A查询逻辑有关的操作"}})]),t._v(" "),n("p",[t._v("总结：")]),t._v(" "),n("p",[t._v("一个数据版本，对于一个事务视图来说，除了自己的更新总是可见以外，有三种情况：")]),t._v(" "),n("ul",[n("li",[t._v("版本未提交，不可见；")]),t._v(" "),n("li",[t._v("版本已提交，但是是在视图创建后提交的，不可见；")]),t._v(" "),n("li",[t._v("版本已提交，而且是在视图创建前提交的，可见。")])]),t._v(" "),n("h3",{attrs:{id:"_3、更新逻辑"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3、更新逻辑"}},[t._v("#")]),t._v(" 3、更新逻辑")]),t._v(" "),n("p",[n("strong",[t._v('更新数据都是先读后写的，而这个读，只能读当前的值，称为"当前读"（current read）')]),t._v("。")]),t._v(" "),n("p",[t._v("在执行事务 B 语句的时候，update 语句是"),n("strong",[t._v("当前读")]),t._v("，这是 row trx_id 为 101，所以 select 语句能读到 k=3。")]),t._v(" "),n("p",[n("strong",[t._v("除了 update 语句外，select 语句如果加锁，也是当前读。")])]),t._v(" "),n("div",{staticClass:"language-shell script extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("mysql"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" k from t where "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("id")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" lock "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" share mode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 读锁（S锁，共享锁）")]),t._v("\nmysql"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" k from t where "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("id")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" update"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 写锁（X锁，排他锁）")]),t._v("\n")])])]),n("p",[t._v("假设事务 C 不是马上提交的，而是变成了下面的事务 C’，会怎么样呢？")]),t._v(" "),n("p",[n("img",{attrs:{src:a(383),alt:"事务A、B、C'的执行流程"}})]),t._v(" "),n("p",[t._v("事务 C’ 没提交，也就是说 (1,2) 这个版本上的写锁还没释放。而事务B 是当前读，必须要读最新版本，而且必须加锁，因此就被锁住了，必须等到事务 C’ 释放这个锁，才能继续它的当前读。")]),t._v(" "),n("p",[t._v("总结：")]),t._v(" "),n("p",[t._v("可重复读的核心就是一致性读（consistent read）；而事务更新数据的时候，只能用当前读。如果当前的记录的行锁被其他事务占用的话，就需要进入锁等待。")]),t._v(" "),n("p",[t._v("读提交的逻辑和可重复读的逻辑类似，它们最主要的区别是：")]),t._v(" "),n("ul",[n("li",[t._v("在可重复读隔离级别下，只需要在事务开始的时候创建一致性视图，之后事务里的其他查询都共用这个一致性视图；")]),t._v(" "),n("li",[t._v("在读提交隔离级别下，每一个语句执行前都会重新算出一个新的视图。")])]),t._v(" "),n("p",[t._v("注意，语句 "),n("code",[t._v("start transaction with consistent snapshot;")]),t._v(" 在读提交隔离级别下，没有意义。")]),t._v(" "),n("p",[t._v("读提交时的状态图，注意是事务 C。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(384),alt:"读提交隔离级别下的事务状态图"}})]),t._v(" "),n("p",[t._v("事务 A 查询语句返回的是 k=2，事务 B 查询结果 k=3。")]),t._v(" "),n("h2",{attrs:{id:"_4、最重要的总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4、最重要的总结"}},[t._v("#")]),t._v(" 4、最重要的总结")]),t._v(" "),n("p",[t._v("一个数据版本，对于一个事务视图来说，除了自己的更新总是可见以外，有三种情况：")]),t._v(" "),n("ul",[n("li",[t._v("版本未提交，不可见；")]),t._v(" "),n("li",[t._v("版本已提交，但是是在视图创建后提交的，不可见；")]),t._v(" "),n("li",[t._v("版本已提交，而且是在视图创建前提交的，可见。")])]),t._v(" "),n("p",[t._v("语句 "),n("code",[t._v("update")]),t._v(" 、"),n("code",[t._v("for update")]),t._v(" 、"),n("code",[t._v("lock in share mode")]),t._v(" 是"),n("strong",[t._v("当前读")]),t._v("。")]),t._v(" "),n("h2",{attrs:{id:"_5、问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5、问题"}},[t._v("#")]),t._v(" 5、问题")]),t._v(" "),n("p",[t._v('我用下面的表结构和初始化语句作为试验环境，事务隔离级别是可重复读。现在，我要把所有"字段c和id值相等的行"的 c 值清零，但是却发现了一个“诡异”的、改不掉的情况。请你构造出这种情况，并说明其原理。')]),t._v(" "),n("div",{staticClass:"language-shell script extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("mysql"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" CREATE TABLE "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("t"),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(" int"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" NOT NULL,\n  "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("c"),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(" int"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" DEFAULT NULL,\n  PRIMARY KEY "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("ENGINE")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("InnoDB"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ninsert into t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id, c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" values"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1,1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(","),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2,2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(","),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3,3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(","),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4,4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("出现的情况：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(385),alt:"出现的情况"}})]),t._v(" "),n("ol",[n("li",[t._v("第一种情况")])]),t._v(" "),n("p",[n("img",{attrs:{src:a(386),alt:"第一种"}}),t._v("\n2. 第二种情况")]),t._v(" "),n("p",[n("img",{attrs:{src:a(387),alt:"第二种"}})])])}),[],!1,null,null,null);s.default=r.exports}}]);