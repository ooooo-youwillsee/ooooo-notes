(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{431:function(t,s,a){"use strict";a.r(s);var e=a(25),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_1、慢查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、慢查询"}},[t._v("#")]),t._v(" 1、慢查询")]),t._v(" "),a("h3",{attrs:{id:"_1、慢查询配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、慢查询配置"}},[t._v("#")]),t._v(" 1、慢查询配置")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("slowlog-log-slower-than")]),t._v(": 10000 (默认值，单位微秒)，超过 10 毫秒的语句就会被记录下来。")]),t._v(" "),a("li",[a("code",[t._v("slowlog-max-len")]),t._v(": 128（默认值），Redis 内部使用列表来保存慢查询日志。")])]),t._v(" "),a("p",[a("code",[t._v("lowlog-log-slower-than")]),t._v(" = 0, 会记录所有命令。")]),t._v(" "),a("p",[a("code",[t._v("lowlog-log-slower-than")]),t._v(" < 0, 不会记录任何命令。")]),t._v(" "),a("p",[t._v("配置方式：")]),t._v(" "),a("ol",[a("li",[t._v("修改配置文件 redis.conf。")]),t._v(" "),a("li",[t._v("动态修改")])]),t._v(" "),a("div",{staticClass:"language-shell script extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("  config "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" lowlog-log-slower-than "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20000")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置慢查询时间")]),t._v("\n  config "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" slowlog-max-len "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置慢查询日志大小")]),t._v("\n  config rewrite  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 持久化到配置文件")]),t._v("\n")])])]),a("ul",[a("li",[t._v("慢查询命令")])]),t._v(" "),a("div",{staticClass:"language-shell script extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("  SLOWLOG GET "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取最近 10 条日志")]),t._v("\n  SLOWLOG LEN  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取日志条数")]),t._v("\n  SLOWLOG RESET "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 慢查询日志重置")]),t._v("\n")])])]),a("h3",{attrs:{id:"_2、最佳实践"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、最佳实践"}},[t._v("#")]),t._v(" 2、最佳实践")]),t._v(" "),a("p",[t._v("参数 "),a("code",[t._v("slowlog-max-len")]),t._v("，建议调大日志列表，比如 1000以上；参数 "),a("code",[t._v("slowlog-log-slower-than")]),t._v("，默认超过 10ms 就判断为慢查询，如果每条命令执行时间在 1ms 以上，则 1s 的并发量不足 1000，所以对于高 OPS 场景设置为 1ms。")]),t._v(" "),a("p",[a("strong",[t._v("慢查询只记录命令执行时间，不包括命令排队和网络传输时间。")])]),t._v(" "),a("p",[t._v("慢查询日志只是一个先进先出的队列，如果查询较多，可能会丢失日志数据，可以利用 "),a("code",[t._v("SLOWLOG GET")]),t._v(" 命令将日志存入 mysql 中，也可以利用开源工具 "),a("a",{attrs:{href:"https://github.com/sohutv/cachecloud",target:"_blank",rel:"noopener noreferrer"}},[t._v("CacheCloud"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"_2、redis-shell"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、redis-shell"}},[t._v("#")]),t._v(" 2、Redis shell")]),t._v(" "),a("h3",{attrs:{id:"_1、redis-cli-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、redis-cli-命令"}},[t._v("#")]),t._v(" 1、redis-cli 命令")]),t._v(" "),a("ul",[a("li",[t._v("-x 参数")])]),t._v(" "),a("div",{staticClass:"language-shell script extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" redis-cli -x "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" hello "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置key为 hello， value为 world")]),t._v("\n")])])]),a("ul",[a("li",[t._v("-c 参数")])]),t._v(" "),a("p",[t._v("集群参数，防止 moved 和 asked 异常。")]),t._v(" "),a("ul",[a("li",[t._v("--rdb 参数")])]),t._v(" "),a("p",[t._v("请求 Redis 实例生成 RDB 文件，保存在本地。")]),t._v(" "),a("ul",[a("li",[t._v("--bigkeys 参数")])]),t._v(" "),a("p",[t._v("选出大 key，这些 key 可能是系统瓶颈。")]),t._v(" "),a("ul",[a("li",[t._v("--eval 参数")])]),t._v(" "),a("p",[t._v("运行 lua 脚本。")]),t._v(" "),a("ul",[a("li",[t._v("latency 参数")])]),t._v(" "),a("ol",[a("li",[t._v("--latency: 客户端与主机延迟 。")]),t._v(" "),a("li",[t._v("--latency-history: 分时段展示延迟，用 "),a("code",[t._v("-i")]),t._v(" 参数来指定，默认为 15s。")]),t._v(" "),a("li",[t._v("--latency-dist: 统计图表形式展示延迟。")])]),t._v(" "),a("ul",[a("li",[t._v("--stat 参数")])]),t._v(" "),a("p",[t._v("实时获取 Redis 重要统计信息，信息比 "),a("code",[t._v("info")]),t._v(" 命令少。")]),t._v(" "),a("h3",{attrs:{id:"_2、redis-server-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、redis-server-命令"}},[t._v("#")]),t._v(" 2、redis-server 命令")]),t._v(" "),a("ul",[a("li",[t._v("--test-memory 参数")])]),t._v(" "),a("div",{staticClass:"language-shell script extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("  redis-server --test-memory "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 检测是否可以给 Redis 分配 1G 内存")]),t._v("\n")])])]),a("h3",{attrs:{id:"_3、redis-benchmark-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、redis-benchmark-命令"}},[t._v("#")]),t._v(" 3、redis-benchmark 命令")]),t._v(" "),a("p",[t._v("用来做基准性能测试。")]),t._v(" "),a("div",{staticClass:"language-shell script extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("  redis-benchmark -c "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v(" -n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20000")]),t._v(" -q -r "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),t._v(" -t get,set --csv\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -c 客户端并发数")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -n 客户端请求总数")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -q 仅仅显示 requests per second 信息")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -r 随机键的范围（0-9999），不是个数")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -t 指定命令")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# --csv 结果按照 csv 格式输出")]),t._v("\n")])])]),a("h2",{attrs:{id:"_3、pipeline"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、pipeline"}},[t._v("#")]),t._v(" 3、Pipeline")]),t._v(" "),a("h3",{attrs:{id:"_1、pipeline-概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、pipeline-概念"}},[t._v("#")]),t._v(" 1、pipeline 概念")]),t._v(" "),a("p",[t._v("redis 执行一条命令可以分为四个过程：")]),t._v(" "),a("ol",[a("li",[t._v("发送命令")]),t._v(" "),a("li",[t._v("命令排队")]),t._v(" "),a("li",[t._v("执行命令")]),t._v(" "),a("li",[t._v("返回结果")])]),t._v(" "),a("p",[t._v("其中 1. 和 4. 称为 RTT (往返时间)。")]),t._v(" "),a("p",[t._v("pipeline 可以将一组 redis 命令通过一次 RTT 发给 Redis，再按照执行结果返回给客户端。")]),t._v(" "),a("p",[t._v("redis-cli 脚本的 --pipe 选项就是使用 pipeline 机制。")]),t._v(" "),a("h3",{attrs:{id:"_2、性能测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、性能测试"}},[t._v("#")]),t._v(" 2、性能测试")]),t._v(" "),a("p",[t._v("pipeline 执行速度一般比逐条执行快，客户端与服务端网路延时越大，效果越明显。")]),t._v(" "),a("h3",{attrs:{id:"_3、原生批量和-pipeline"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、原生批量和-pipeline"}},[t._v("#")]),t._v(" 3、原生批量和 pipeline")]),t._v(" "),a("ul",[a("li",[t._v("原生批量命令是原子的，pipeline 不是原子的（中间可以执行其他命令）。")]),t._v(" "),a("li",[t._v("原生批量命令是一个命令对应多个 key, pipeline 支持多个命令。")]),t._v(" "),a("li",[t._v("原生批零命令是 Redis 服务端实现的，pipeline 是客户端和服务端共同实现的。")])]),t._v(" "),a("h3",{attrs:{id:"_4、最佳实践"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、最佳实践"}},[t._v("#")]),t._v(" 4、最佳实践")]),t._v(" "),a("ul",[a("li",[t._v("pipeline 封装的数据不能过多，即大数据可以拆分为批量的小 pipeline 命令。")]),t._v(" "),a("li",[t._v("pipeline 只能操作一个 Redis 实例。")])]),t._v(" "),a("h2",{attrs:{id:"_4、事务与lua"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、事务与lua"}},[t._v("#")]),t._v(" 4、事务与Lua")]),t._v(" "),a("blockquote",[a("p",[t._v("为了保证多个命令组合的原子性，Redis 提供了简单事务功能和 lua 脚本。")])]),t._v(" "),a("h3",{attrs:{id:"_1、事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、事务"}},[t._v("#")]),t._v(" 1、事务")]),t._v(" "),a("div",{staticClass:"language-shell script extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("  MULTI "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 开启事务")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 执行命令，实际上把命令放到队列中")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 执行命令，实际上把命令放到队列中")]),t._v("\n  EXEC "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 真正的执行命令 ")]),t._v("\n")])])]),a("ol",[a("li",[t._v("命令错误，会导致事务执行失败，比如 "),a("code",[t._v("set a 1")]),t._v("写成了 "),a("code",[t._v("sett a 1")]),t._v("。")]),t._v(" "),a("li",[t._v("运行时错误，redis 不支持回滚，比如 "),a("code",[t._v("sadd a 1")]),t._v(" 写成了 "),a("code",[t._v("zadd a 1 b")]),t._v("，假设 a 这个 key 已经存在，就会抛出错误。")])]),t._v(" "),a("p",[t._v("事务简单主要原因就是，"),a("strong",[t._v("redis 不支持回滚")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"_2、lua"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、lua"}},[t._v("#")]),t._v(" 2、Lua")]),t._v(" "),a("p",[t._v("在 Redis 中使用 Lua，有两种方式 "),a("code",[t._v("eval")]),t._v(" 和 "),a("code",[t._v("evalsha")]),t._v("。")]),t._v(" "),a("ul",[a("li",[t._v("eval")])]),t._v(" "),a("div",{staticClass:"language-shell script extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("  EVAL script numkeys key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" arg "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("arg "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("eval")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'return \"hello \" .. KEYS[1] .. ARGV[1]'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" world redis  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 例子")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# 输出 "hello worldredis"')]),t._v("\n")])])]),a("p",[t._v("如果 Lua 脚本较长，可以使用 redis-cli --eval 选项来执行。")]),t._v(" "),a("ul",[a("li",[t._v("evalsha")])]),t._v(" "),a("p",[t._v("使用 eval 命令，每次都需要将脚本发送到服务端，使用 "),a("code",[t._v("evalsha")]),t._v(" 命令就避免了开销。")]),t._v(" "),a("div",{staticClass:"language-shell script extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("  redis-cli script load hello.lua "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 加载 lua 脚本到服务端，会返回 sha1 值。")]),t._v("\n  EVALSHA sha1 numkeys key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" arg "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("arg "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 执行 lua 脚本，参数 sha1 就是返回的 sha1 值，其他参数同 eval 命令。")]),t._v("\n")])])]),a("ul",[a("li",[t._v("lua 中使用 redis API")])]),t._v(" "),a("div",{staticClass:"language-shell script extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("  redis.call"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"set"')]),t._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),t._v(" , "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  redis.call"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"get"')]),t._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("也可以使用 "),a("code",[t._v("redis.pcall")]),t._v(" 命令，两者差别在于 pcall 命令会忽略错误继续执行，call 遇到错误停止。")]),t._v(" "),a("p",[a("strong",[t._v("lua 脚本执行是原子性的，中间不会插入别的命令。")])]),t._v(" "),a("ul",[a("li",[t._v("管理 lua 脚本命令")])]),t._v(" "),a("div",{staticClass:"language-shell script extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("  SCRIPT LOAD "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 加载 lua 脚本，返回 sha1 值")]),t._v("\n  SCRIPT EXISTS sha1 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("sha1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 是否存在 sha1 的脚本")]),t._v("\n  SCRIPT FLUSH "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 清空 lua 脚本")]),t._v("\n  SCRIPT KILL "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 杀掉 lua 脚本")]),t._v("\n")])])]),a("h2",{attrs:{id:"_5、bitmaps"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、bitmaps"}},[t._v("#")]),t._v(" 5、Bitmaps")]),t._v(" "),a("h3",{attrs:{id:"_1、数据结构模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、数据结构模型"}},[t._v("#")]),t._v(" 1、数据结构模型")]),t._v(" "),a("p",[t._v("Bitmaps 不是一种数据结构，实际上它是字符串，但它可以对字符串的位进行操作，你可以想象一个以位为单位的数组，每个单元只能存储 0 和1。")]),t._v(" "),a("h3",{attrs:{id:"_2、命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、命令"}},[t._v("#")]),t._v(" 2、命令")]),t._v(" "),a("ul",[a("li",[t._v("设置值")])]),t._v(" "),a("div",{staticClass:"language-shell script extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("  SETBIT key offset value "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# offset 从 0 开始")]),t._v("\n")])])]),a("ul",[a("li",[t._v("获取值")])]),t._v(" "),a("div",{staticClass:"language-shell script extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("  GETBIT key offset "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 结果只有 0 或者 1")]),t._v("\n  BITCOUNT key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("start end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 对[start, end]范围获取值为 1 的个数  ")]),t._v("\n")])])]),a("ul",[a("li",[t._v("Bitmaps 间的运算")])]),t._v(" "),a("div",{staticClass:"language-shell script extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("  BITOP operation destkey key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# operation 可以是 and(交集)、or(并集)、not(非)、xor(异或)")]),t._v("\n")])])]),a("ul",[a("li",[t._v("获取第一个为 bit 的 offset 值")])]),t._v(" "),a("div",{staticClass:"language-shell script extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("  BITPOS key bit "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [start,end]范围中第一个出现 bit 的 offset ")]),t._v("\n")])])]),a("h3",{attrs:{id:"_3、分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、分析"}},[t._v("#")]),t._v(" 3、分析")]),t._v(" "),a("p",[t._v("利用 Bitmaps 来统计网站访问用户：")]),t._v(" "),a("div",{staticClass:"language-shell script extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("  SETBIT users:2020-03-22 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2020-03-22 这一天 1 号访问了。")]),t._v("\n  SETBIT users:2020-03-23 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2020-03-23 这一天 2 号访问了。  ")]),t._v("\n  BITCOUNT users:2020-03-23  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2020-03-23 这一天 访问用户量")]),t._v("\n  BITOP and users:2020-03-22_23 users:2020-03-23 users:2020-03-22 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 两天都访问的用户量")]),t._v("\n")])])]),a("p",[t._v("set 和 bitmaps 对比：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("数据类型")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("每个用户 id 占用空间")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("需要存储用户量")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("全部内存量")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("set")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("64 位")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("5 千万")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("64 位 * 5 千万 = 400 MB")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("bitmaps")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("1 位")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("1 亿")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("1 位 * 1 亿 = 12.5 MB")])])])]),t._v(" "),a("p",[t._v("从表格可以看出 bitmaps 节省内存。")]),t._v(" "),a("p",[t._v("但如果每天的活跃用户很少，set 可能比 bitmaps 好，因为 set 需要内存 64 位 * 10 万 = 800 KB，而 bitmap 还是需要 12.5 MB 内存。")]),t._v(" "),a("h2",{attrs:{id:"_6、hyperloglog"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、hyperloglog"}},[t._v("#")]),t._v(" 6、HyperLogLog")]),t._v(" "),a("p",[t._v("HyperLoglog 不是一种新的数据结构，而是一种基数算法，可以利用极小的内存空间完成独立总数统计，数据集可以 ID、Email、IP。")]),t._v(" "),a("ul",[a("li",[t._v("命令")])]),t._v(" "),a("div",{staticClass:"language-shell script extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("  PFADD key element "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("element "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加元素")]),t._v("\n  PFCOUNT key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 计数")]),t._v("\n  PFMERGE destkey sourcekey "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("sourcekey "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# merge")]),t._v("\n")])])]),a("p",[t._v("注意：")]),t._v(" "),a("ul",[a("li",[t._v("只是计算独立总数，不需要获取单条数据")]),t._v(" "),a("li",[t._v("HyperLogLog 有误差")])]),t._v(" "),a("h2",{attrs:{id:"_7、发布订阅"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7、发布订阅"}},[t._v("#")]),t._v(" 7、发布订阅")]),t._v(" "),a("p",[t._v("Redis 提供"),a("strong",[t._v("发布/订阅")]),t._v("模式的消息机制。")]),t._v(" "),a("ul",[a("li",[t._v("命令")])]),t._v(" "),a("div",{staticClass:"language-shell script extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("  PUBLISH channel message "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 向指定的 channel 发布消息")]),t._v("\n  SUBSCRIBE channel "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("channel "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 向指定的 channel 订阅消息")]),t._v("\n  PSUBSCRIBE pattern "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("pattern "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 模式订阅消息")]),t._v("\n  UNSUBSCRIBE "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("channel "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("channel "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 取消订阅           ")]),t._v("\n  PUNSUBSCRIBE "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("pattern "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("pattern "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 模式取消订阅")]),t._v("\n  PUBSUB subcommand "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("argument "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("argument "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看订阅")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# PUBSUB channels [pattern] # 频道")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# PUBSUB numsub [channel ...] # channel 订阅数")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# PUBSUB numpat # 模式订阅数")]),t._v("\n")])])]),a("p",[t._v("注意：")]),t._v(" "),a("ul",[a("li",[t._v("Redis 提供的消息机制，无法实现消息堆积、回溯")]),t._v(" "),a("li",[t._v("消息队列的优点："),a("strong",[t._v("异步")]),t._v("、"),a("strong",[t._v("解耦")]),t._v("、"),a("strong",[t._v("削峰")]),t._v("，缺点："),a("strong",[t._v("复杂度提高")]),t._v("。")])]),t._v(" "),a("h2",{attrs:{id:"_8、geo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8、geo"}},[t._v("#")]),t._v(" 8、GEO")]),t._v(" "),a("p",[t._v("Redis 提供了 GEO（地址位置）功能，支持存储地理位置信息。")]),t._v(" "),a("ul",[a("li",[t._v("添加位置信息")])]),t._v(" "),a("div",{staticClass:"language-shell script extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("  GEOADD key longitude latitude member "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("longitude latitude member "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("ul",[a("li",[t._v("获取位置信息")])]),t._v(" "),a("div",{staticClass:"language-shell script extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("  GEOPOS key member "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("member "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("ul",[a("li",[t._v("获取两个地理位置的距离")])]),t._v(" "),a("div",{staticClass:"language-shell script extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("  GEODIST key member1 member2 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("unit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# unit: m(米)；（km）公里；（mi）英里；（fl）尺")]),t._v("\n")])])]),a("ul",[a("li",[t._v("获取指定范围内的地理位置集合")])]),t._v(" "),a("div",{staticClass:"language-shell script extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("  GEORADIUS key longitude latitude radius m"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("km"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("ft"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("mi "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("WITHCOORD"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("WITHDIST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("WITHHASH"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("COUNT count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ASC"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("DESC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("STORE key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("STOREDIST key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 根据具体的经纬度来获取")]),t._v("\n  GEORADIUSBYMEMBER key member radius m"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("km"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("ft"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("mi "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("WITHCOORD"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("WITHDIST"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("WITHHASH"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("COUNT count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ASC"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("DESC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("STORE key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("STOREDIST key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 根据某一个成员来获取")]),t._v("\n")])])]),a("ul",[a("li",[t._v("获取 geohash")])]),t._v(" "),a("div",{staticClass:"language-shell script extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("  GEOHASH key member "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("member "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Redis 将二维的经纬度转化为一维字符串")]),t._v("\n")])])]),a("ul",[a("li",[t._v("删除地理位置")])]),t._v(" "),a("div",{staticClass:"language-shell script extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("  ZREM key member "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("member "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Redis 没有提供专门的删除命令，可以借助 ZREM 命令来删除")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# GEO 的数据类型为 zset")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);