<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>source code - Tag - 线偶的IT笔记</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/tags/source-code/</link><description>source code - Tag - 线偶的IT笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>297872913@qq.com (ooooo-youwillsee)</managingEditor><webMaster>297872913@qq.com (ooooo-youwillsee)</webMaster><lastBuildDate>Tue, 17 Oct 2023 08:00:00 +0800</lastBuildDate><atom:link href="https://ooooo-youwillsee.github.io/ooooo-notes/tags/source-code/" rel="self" type="application/rss+xml"/><item><title>源码分析 activiti 定时任务</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-activiti-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</link><pubDate>Tue, 17 Oct 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-activiti-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</guid><description><![CDATA[activiti 基于 8.0.0 版本 在这一节，详细介绍 BoundaryEvent, 这是工作流框架中很重要的节点，同时涉及到定时任务。 先来看看 BoundaryEvent 的 xml 定义 1 2 3 4 5 6 7 8 9 10 11 12 13 &lt;userTask id=&#34;firstTask&#34; name=&#34;First Task&#34; /&gt; &lt;!-- 在]]></description></item><item><title>源码分析 activiti DbSqlSession</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-activiti-dbsqlsession/</link><pubDate>Mon, 16 Oct 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-activiti-dbsqlsession/</guid><description>activiti 基于 8.0.0 版本 工作流操作数据库，并不是直接执行 SQL 语句来完成的，而是通过操作缓存对象来实现的。 Entity 类 源码位置: org.activiti.engine.impl.persistence.entity.Entity 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17</description></item><item><title>源码分析 activiti CommandExecutor 执行命令</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-activiti-commandexecutor-%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4/</link><pubDate>Sun, 15 Oct 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-activiti-commandexecutor-%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4/</guid><description>activiti 基于 8.0.0 版本 从之前的分析可以发现，工作流的每个操作都是一个 Command, 所以有必要看看内部的实现机制。 Command 类 源码位置: org.activiti.engine.impl.interceptor.Command 1 2 3 4 5 6 // 接口非常简单，执行过</description></item><item><title>搭建 rocketmq 源码调试环境</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%90%AD%E5%BB%BA-rocketmq-%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/</link><pubDate>Sat, 14 Oct 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%90%AD%E5%BB%BA-rocketmq-%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/</guid><description>rocketmq 基于 5.1.4 版本 启动 namesrv 在 org.apache.rocketmq.namesrv.NamesrvStartup 中，配置环境变量 ROCKETMQ_HOME，如下图。 启动 namesrv 启动 broker 在 org.apache.rocketmq.broker.BrokerController 中，配置环境变量 ROCKETMQ_HOME 和启动参数，如下图。 1 2 3 # -n 指</description></item><item><title>源码分析 activiti 常用的 ActivityBehavior</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-activiti-%E5%B8%B8%E7%94%A8%E7%9A%84-activitybehavior/</link><pubDate>Sat, 14 Oct 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-activiti-%E5%B8%B8%E7%94%A8%E7%9A%84-activitybehavior/</guid><description>activiti 基于 8.0.0 版本 通过在【agenda流转节点】章节，我们知道了每一个节点的行为由对应的 behavior 来决定，所以有必要看看常用的 behavior 实现。 StartEvent 对应的 behavior 类: NoneStartEventActivityBehavior 可以</description></item><item><title>源码分析 activiti Agenda 流转节点</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-activiti-agenda-%E6%B5%81%E8%BD%AC%E8%8A%82%E7%82%B9/</link><pubDate>Fri, 13 Oct 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-activiti-agenda-%E6%B5%81%E8%BD%AC%E8%8A%82%E7%82%B9/</guid><description>activiti 基于 8.0.0 版本 Agenda 类是工作流框架中非常重要的类，它控制着节点怎么流转。这部分的代码比较复杂，建议多调试几遍。下面的代码实际上是一个闭环，从开始的</description></item><item><title>源码分析 activiti 启动流程</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-activiti-%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</link><pubDate>Thu, 12 Oct 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-activiti-%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</guid><description>activiti 基于 8.0.0 版本 启动流程的方法有多个，这里以 startProcessInstanceByKey 为入口来分析 启动流程 源码位置: org.activiti.engine.impl.RuntimeServiceImpl#startProcessInstanceByKey 1 2 3 4 5 // 启动流程 public ProcessInstance startProcessInstanceByKey(String processDefinitionKey) { // 执行 StartProcessInstanceCmd return commandExecutor.execute(new StartProcessInstanceCmd&amp;lt;ProcessInstance&amp;gt;(processDefinitionKey, null, null, null)); } 源码位置: org.activiti.engine.impl.cmd.StartProcessInstanceCmd#execute 1</description></item><item><title>源码分析 activiti 解析流程</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-activiti-%E8%A7%A3%E6%9E%90%E6%B5%81%E7%A8%8B/</link><pubDate>Wed, 11 Oct 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-activiti-%E8%A7%A3%E6%9E%90%E6%B5%81%E7%A8%8B/</guid><description>activiti 基于 8.0.0 版本 每次部署新的流程，必定会解析流程来检查文件是否正确，并将 xml 元素映射到 java 对象上。 解析流程 源码位置: org.activiti.engine.impl.bpmn.deployer.ParsedDeploymentBuilder#createBpmnParseFromResource 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15</description></item><item><title>源码分析 activiti 部署流程</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-activiti-%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/</link><pubDate>Tue, 10 Oct 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-activiti-%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/</guid><description>activiti 基于 8.0.0 版本 部署流程 源码位置: org.activiti.engine.impl.repository.DeploymentBuilderImpl#deploy 1 2 3 4 5 6 7 8 9 10 // 部署流程 public Deployment deploy() { return repositoryService.deploy(this); } // org.activiti.engine.impl.RepositoryServiceImpl#deploy public Deployment deploy(DeploymentBuilderImpl deploymentBuilder) { // 执行 DeployCmd, 最终会执行 DeployCmd#execute 方法 return commandExecutor.execute(new DeployCmd&amp;lt;Deployment&amp;gt;(deploymentBuilder)); } 源码位置: org.activiti.engine.impl.cmd.DeployCmd#execute 1 2 3</description></item><item><title>源码分析 activiti 集成 spring</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-activiti-%E9%9B%86%E6%88%90-spring/</link><pubDate>Mon, 09 Oct 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-activiti-%E9%9B%86%E6%88%90-spring/</guid><description>activiti 基于 8.0.0 版本 在大多数情况下，activiti 都会与 spring boot 框架一起使用，所以这一节就来介绍 activiti 是如何集成 spring 的。 activitiProperties 配置 配置类: org.activiti.spring.boot.ActivitiProperties java 1 2 3 4 5 6 7 8 9</description></item></channel></rss>