<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Source Code - 标签 - 线偶的IT笔记</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/tags/source-code/</link><description>Source Code - 标签 | 线偶的IT笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>297872913@qq.com (线偶)</managingEditor><webMaster>297872913@qq.com (线偶)</webMaster><lastBuildDate>Tue, 09 Apr 2024 08:00:00 +0800</lastBuildDate><atom:link href="https://ooooo-youwillsee.github.io/ooooo-notes/tags/source-code/" rel="self" type="application/rss+xml"/><item><title>02 RedissonSpinLock</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/02-redissonspinlock/</link><pubDate>Tue, 09 Apr 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/02-redissonspinlock/</guid><description>redisson 基于 org.redisson:redisson-spring-data-27:3.27.2 版本 在 java 中，操作 redis 一般都会选择 redisson 框架, 我们需要了解常用功能的实现原理, 这次来介绍 RedissonSpinLock。 使用方式 1 2 3 4 5</description></item><item><title>01 RedissonLock</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/01-redissonlock/</link><pubDate>Mon, 08 Apr 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/01-redissonlock/</guid><description>redisson 基于 org.redisson:redisson-spring-data-27:3.27.2 版本 在 java 中，操作 redis 一般都会选择 redisson 框架, 我们需要了解常用功能的实现原理, 这次来介绍 RedissonLock。 使用方式 1 2 3 4 5 6 7 8 9</description></item><item><title>05 TreeMap</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/05-treemap/</link><pubDate>Wed, 03 Apr 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/05-treemap/</guid><description>jdk 基于 8 版本 在平时的开发中，我们很少会用到 TreeMap, 但是还是需要了解源码。 TreeMap 基于红黑树来实现按照 key 排序，关于这个算法，这里不做解释。 使用方式 1 2 3 4</description></item><item><title>04 LinkedHashMap</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/04-linkedhashmap/</link><pubDate>Tue, 02 Apr 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/04-linkedhashmap/</guid><description>jdk 基于 8 版本 在平时的开发中，我们会经常用到 LinkedHashMap, 非常有必要了解源码。 LinkedHashMap 基于 HashMap 来实现, 内部借助双向链表来维持访问顺序，可以用来实现 LRU 算法。 使用方式</description></item><item><title>03 HashMap</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/03-hashmap/</link><pubDate>Mon, 01 Apr 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/03-hashmap/</guid><description>jdk 基于 8 版本 在平时的开发中，我们会经常用到 HashMap, 非常有必要了解源码。 HashMap 基于拉链法和红黑树来实现，关于这两个算法，这里不做解释。 使用方式 1 2 3 4 5</description></item><item><title>01 ArrayList</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/01-arraylist/</link><pubDate>Mon, 18 Mar 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/01-arraylist/</guid><description><![CDATA[jdk 基于 8 版本 在平时的开发中，我们会经常用到 ArrayList, 非常有必要了解源码。 使用方式 1 2 3 4 5 6 7 8 9 10 11 12 13 public class ArrayListTest { @Test void test() { List&lt;String&gt; ids = new ArrayList&lt;&gt;(); assertThat(ids.add(&#34;1&#34;)).isEqualTo(true); assertThat(ids.add(&#34;2&#34;)).isEqualTo(true); assertThat(ids.add(&#34;3&#34;)).isEqualTo(true); assertThat(ids.remove(&#34;2&#34;)).isEqualTo(true); assertThat(ids.set(0, &#34;4&#34;)).isEqualTo(&#34;1&#34;); assertThat(ids.get(0)).isEqualTo(&#34;4&#34;); }]]></description></item><item><title>02 LinkedList</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/02-linkedlist/</link><pubDate>Mon, 18 Mar 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/02-linkedlist/</guid><description><![CDATA[jdk 基于 8 版本 在平时的开发中，我们会经常用到 LinkedList, 非常有必要了解源码。 使用方式 1 2 3 4 5 6 7 8 9 10 11 12 13 public class LinkedListTest { @Test void test() { List&lt;String&gt; ids = new LinkedList&lt;&gt;(); assertThat(ids.add(&#34;1&#34;)).isEqualTo(true); assertThat(ids.add(&#34;2&#34;)).isEqualTo(true); assertThat(ids.add(&#34;3&#34;)).isEqualTo(true); assertThat(ids.remove(&#34;2&#34;)).isEqualTo(true); assertThat(ids.set(0, &#34;4&#34;)).isEqualTo(&#34;1&#34;); assertThat(ids.get(0)).isEqualTo(&#34;4&#34;); }]]></description></item><item><title>事务传播类型</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E7%B1%BB%E5%9E%8B/</link><pubDate>Fri, 23 Feb 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E7%B1%BB%E5%9E%8B/</guid><description>只要涉及到数据库操作，必定就会使用 @Transactional 注解，其中有一个属性就是 propagation(传播类型)，掌握它的用法很重要。演示代码见末尾。 演示事务</description></item><item><title>异步 servlet 原理</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%BC%82%E6%AD%A5-servlet-%E5%8E%9F%E7%90%86/</link><pubDate>Sat, 06 Jan 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%BC%82%E6%AD%A5-servlet-%E5%8E%9F%E7%90%86/</guid><description>在 servlet 3.0 的规范中，有异步servlet特性，这个可以增大吞吐量。我们有必要看看 spring 是如何适配这个特性的。 实现异步 servlet在 spring mvc 中，实现异步</description></item><item><title>13 集成 k8s</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/13-%E9%9B%86%E6%88%90-k8s/</link><pubDate>Mon, 25 Dec 2023 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/13-%E9%9B%86%E6%88%90-k8s/</guid><description>dubbo 基于 3.2.6 版本 如果我们将 dubbo 应用部署在 k8s 环境中，我们就可以使用 k8s 作为注册中心。 服务调用流程 provider 使用 KubernetesServiceDiscovery#doRegister 注册服务实例，元数据信息会存放在 pod 对象上. consumer 使</description></item></channel></rss>