<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>source code - Tag - 线偶的IT笔记</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/tags/source-code/</link><description>source code - Tag - 线偶的IT笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>297872913@qq.com (ooooo-youwillsee)</managingEditor><webMaster>297872913@qq.com (ooooo-youwillsee)</webMaster><lastBuildDate>Wed, 06 Dec 2023 08:00:00 +0800</lastBuildDate><atom:link href="https://ooooo-youwillsee.github.io/ooooo-notes/tags/source-code/" rel="self" type="application/rss+xml"/><item><title>源码分析 dubbo 引用服务（接口级别）</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-dubbo-%E5%BC%95%E7%94%A8%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3%E7%BA%A7%E5%88%AB/</link><pubDate>Wed, 06 Dec 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-dubbo-%E5%BC%95%E7%94%A8%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3%E7%BA%A7%E5%88%AB/</guid><description>dubbo 基于 3.2.6 版本 接口级别引用是 dubbo 2.x 版本的方式，其主流程和之前的章节【引用服务】没有差别，主要区别在于注册中心的逻辑不一样。 RegistryProtocol#doCreateInvoker 创建 invoker 源码位置: org.apache.dubbo.registry.integration.RegistryProtocol#doCreateInvoker 1</description></item><item><title>源码分析 dubbo 导出服务（接口级别）</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-dubbo-%E5%AF%BC%E5%87%BA%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3%E7%BA%A7%E5%88%AB/</link><pubDate>Tue, 05 Dec 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-dubbo-%E5%AF%BC%E5%87%BA%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3%E7%BA%A7%E5%88%AB/</guid><description>dubbo 基于 3.2.6 版本 接口级别导出是 dubbo 2.x 版本的方式，其主流程和之前的章节【导出服务】没有差别，主要区别在于注册中心的逻辑不一样。 RegistryProtocol#export 导出服务 源码位置: org.apache.dubbo.registry.integration.RegistryProtocol#export</description></item><item><title>源码分析 dubbo 常用过滤器</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-dubbo-%E5%B8%B8%E7%94%A8%E8%BF%87%E6%BB%A4%E5%99%A8/</link><pubDate>Mon, 04 Dec 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-dubbo-%E5%B8%B8%E7%94%A8%E8%BF%87%E6%BB%A4%E5%99%A8/</guid><description>dubbo 基于 3.2.6 版本 在 dubbo 中，filter 是非常核心的组件之一，很多功能都是依靠 filter 来实现的，下面我来介绍几种常用的 filter 实现。 ConsumerContextFilter (consumer 传递隐式参数) 源码位置:</description></item><item><title>源码分析 dubbo 引用服务</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-dubbo-%E5%BC%95%E7%94%A8%E6%9C%8D%E5%8A%A1/</link><pubDate>Mon, 27 Nov 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-dubbo-%E5%BC%95%E7%94%A8%E6%9C%8D%E5%8A%A1/</guid><description>dubbo 基于 3.2.6 版本 在 dubbo 中引用服务的源码是非常复杂的，这里只介绍主要流程。 DefaultModuleDeployer#referServices 引用服务 源码位置: org.apache.dubbo.config.deploy.DefaultModuleDeployer#referServices 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26</description></item><item><title>源码分析 dubbo 导出服务</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-dubbo-%E5%AF%BC%E5%87%BA%E6%9C%8D%E5%8A%A1/</link><pubDate>Sat, 25 Nov 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-dubbo-%E5%AF%BC%E5%87%BA%E6%9C%8D%E5%8A%A1/</guid><description>dubbo 基于 3.2.6 版本 在 dubbo 中导出服务的源码是非常复杂的，这里只介绍主要流程。 DefaultModuleDeployer#exportServices 导出服务 源码位置: org.apache.dubbo.config.deploy.DefaultModuleDeployer#exportServices 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26</description></item><item><title>spring boot 适配 servlet 规范</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/spring-boot-%E9%80%82%E9%85%8D-servlet-%E8%A7%84%E8%8C%83/</link><pubDate>Sat, 18 Nov 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/spring-boot-%E9%80%82%E9%85%8D-servlet-%E8%A7%84%E8%8C%83/</guid><description>在 spring boot 中，只需要创建一个 bean 实现 filter 接口，spring boot 就会把这个 filter 加入到 servlet 容器中。 在实际使用中，常用的接口就是 OncePerRequestFilter 和 OrderedFilter, 所以来看看 spring boot 是如何适配 servlet</description></item><item><title>源码分析 rocketmq producer 发送消息</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-rocketmq-producer-%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF/</link><pubDate>Fri, 20 Oct 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-rocketmq-producer-%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF/</guid><description>rocketmq 基于 5.1.4 版本 在 rocketmq 中，消息分为多个类型，比如普通消息、批量消息、延迟消息、事务消息等，这一节主要介绍普通消息的逻辑，后面的章节会继续介绍其他消</description></item><item><title>源码分析 rocketmq broker 注册 namesvr</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-rocketmq-broker-%E6%B3%A8%E5%86%8C-namesvr/</link><pubDate>Thu, 19 Oct 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-rocketmq-broker-%E6%B3%A8%E5%86%8C-namesvr/</guid><description>rocketmq 基于 5.1.4 版本 broker 发起注册请求 源码位置: org.apache.rocketmq.broker.BrokerController#start 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 // 启动定时任务，发起 broker 注册 public void start() throws Exception {</description></item><item><title>源码分析 activiti 定时任务</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-activiti-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</link><pubDate>Tue, 17 Oct 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-activiti-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</guid><description><![CDATA[activiti 基于 8.0.0 版本 在这一节，详细介绍 BoundaryEvent, 这是工作流框架中很重要的节点，同时涉及到定时任务。 先来看看 BoundaryEvent 的 xml 定义 1 2 3 4 5 6 7 8 9 10 11 12 13 &lt;userTask id=&#34;firstTask&#34; name=&#34;First Task&#34; /&gt; &lt;!-- 在]]></description></item><item><title>源码分析 activiti DbSqlSession</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-activiti-dbsqlsession/</link><pubDate>Mon, 16 Oct 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-activiti-dbsqlsession/</guid><description>activiti 基于 8.0.0 版本 工作流操作数据库，并不是直接执行 SQL 语句来完成的，而是通过操作缓存对象来实现的。 Entity 类 源码位置: org.activiti.engine.impl.persistence.entity.Entity 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17</description></item></channel></rss>