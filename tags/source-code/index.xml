<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Source Code - 标签 - 线偶的IT笔记</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/tags/source-code/</link><description>Source Code - 标签 | 线偶的IT笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>297872913@qq.com (线偶)</managingEditor><webMaster>297872913@qq.com (线偶)</webMaster><lastBuildDate>Mon, 13 May 2024 08:00:00 +0800</lastBuildDate><atom:link href="https://ooooo-youwillsee.github.io/ooooo-notes/tags/source-code/" rel="self" type="application/rss+xml"/><item><title>spring cache 原理</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/spring-cache-%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 13 May 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/spring-cache-%E5%8E%9F%E7%90%86/</guid><description>spring cache 是最常见的功能之一，有必要了解其原理。 CacheAutoConfiguration 自动配置类源码位置: org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 // 导入 CacheConfigurationImportSelector 配置类 @Import({ CacheConfigurationImportSelector.class,</description></item><item><title>04 RedissonSortedSet</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/04-redissonsortedset/</link><pubDate>Thu, 11 Apr 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/04-redissonsortedset/</guid><description>redisson 基于 org.redisson:redisson-spring-data-27:3.27.2 版本 在 java 中，操作 redis 一般都会选择 redisson 框架, 我们需要了解常用功能的实现原理, 这次来介绍 RedissonSortedSet。 使用方式 1 2 3 4</description></item><item><title>05 RedissonPriorityQueue</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/05-redissonpriorityqueue/</link><pubDate>Thu, 11 Apr 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/05-redissonpriorityqueue/</guid><description>redisson 基于 org.redisson:redisson-spring-data-27:3.27.2 版本 在 java 中，操作 redis 一般都会选择 redisson 框架, 我们需要了解常用功能的实现原理, 这次来介绍 RedissonPriorityQueue。 使用方式</description></item><item><title>03 RedissonMultiLock</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/03-redissonmultilock/</link><pubDate>Wed, 10 Apr 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/03-redissonmultilock/</guid><description>redisson 基于 org.redisson:redisson-spring-data-27:3.27.2 版本 在 java 中，操作 redis 一般都会选择 redisson 框架, 我们需要了解常用功能的实现原理, 这次来介绍 RedissonMultiLock。 使用方式 1 2 3 4</description></item><item><title>02 RedissonSpinLock</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/02-redissonspinlock/</link><pubDate>Tue, 09 Apr 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/02-redissonspinlock/</guid><description>redisson 基于 org.redisson:redisson-spring-data-27:3.27.2 版本 在 java 中，操作 redis 一般都会选择 redisson 框架, 我们需要了解常用功能的实现原理, 这次来介绍 RedissonSpinLock。 使用方式 1 2 3 4 5</description></item><item><title>01 RedissonLock</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/01-redissonlock/</link><pubDate>Mon, 08 Apr 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/01-redissonlock/</guid><description>redisson 基于 org.redisson:redisson-spring-data-27:3.27.2 版本 在 java 中，操作 redis 一般都会选择 redisson 框架, 我们需要了解常用功能的实现原理, 这次来介绍 RedissonLock。 使用方式 1 2 3 4 5 6 7 8 9</description></item><item><title>05 TreeMap</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/05-treemap/</link><pubDate>Wed, 03 Apr 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/05-treemap/</guid><description>jdk 基于 8 版本 在平时的开发中，我们很少会用到 TreeMap, 但是还是需要了解源码。 TreeMap 基于红黑树来实现按照 key 排序，关于这个算法，这里不做解释。 使用方式 1 2 3 4</description></item><item><title>04 LinkedHashMap</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/04-linkedhashmap/</link><pubDate>Tue, 02 Apr 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/04-linkedhashmap/</guid><description>jdk 基于 8 版本 在平时的开发中，我们会经常用到 LinkedHashMap, 非常有必要了解源码。 LinkedHashMap 基于 HashMap 来实现, 内部借助双向链表来维持访问顺序，可以用来实现 LRU 算法。 使用方式</description></item><item><title>03 HashMap</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/03-hashmap/</link><pubDate>Mon, 01 Apr 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/03-hashmap/</guid><description>jdk 基于 8 版本 在平时的开发中，我们会经常用到 HashMap, 非常有必要了解源码。 HashMap 基于拉链法和红黑树来实现，关于这两个算法，这里不做解释。 使用方式 1 2 3 4 5</description></item><item><title>01 ArrayList</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/01-arraylist/</link><pubDate>Mon, 18 Mar 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/01-arraylist/</guid><description><![CDATA[jdk 基于 8 版本 在平时的开发中，我们会经常用到 ArrayList, 非常有必要了解源码。 使用方式 1 2 3 4 5 6 7 8 9 10 11 12 13 public class ArrayListTest { @Test void test() { List&lt;String&gt; ids = new ArrayList&lt;&gt;(); assertThat(ids.add(&#34;1&#34;)).isEqualTo(true); assertThat(ids.add(&#34;2&#34;)).isEqualTo(true); assertThat(ids.add(&#34;3&#34;)).isEqualTo(true); assertThat(ids.remove(&#34;2&#34;)).isEqualTo(true); assertThat(ids.set(0, &#34;4&#34;)).isEqualTo(&#34;1&#34;); assertThat(ids.get(0)).isEqualTo(&#34;4&#34;); }]]></description></item></channel></rss>