<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Java - 标签 - 线偶的IT笔记</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/tags/java/</link><description>Java - 标签 | 线偶的IT笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>297872913@qq.com (线偶)</managingEditor><webMaster>297872913@qq.com (线偶)</webMaster><lastBuildDate>Wed, 15 Mar 2023 08:00:00 +0800</lastBuildDate><atom:link href="https://ooooo-youwillsee.github.io/ooooo-notes/tags/java/" rel="self" type="application/rss+xml"/><item><title>h2 数据库使用</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/h2-%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%BF%E7%94%A8/</link><pubDate>Wed, 15 Mar 2023 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/h2-%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BD%BF%E7%94%A8/</guid><description><![CDATA[怎么使用 h2 数据库。 1. 引入依赖 1 2 3 4 dependencies { api(&#39;p6spy:p6spy&#39;) api(&#39;com.h2database:h2&#39;) } 2. 以内存的方式使用 1 2 3 4 5 # spring boot 配置 spring: datasource: driverClassName: com.p6spy.engine.spy.P6SpyDriver url: jdbc:p6spy:h2:mem:test;DB_CLOSE_DELAY=1000 3. 以进程的方式使用 1 2 3 4 5 6 7 8 # 启动 h2 数]]></description></item><item><title>在 java 中使用 CAS 来实现队列</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%9C%A8-java-%E4%B8%AD%E4%BD%BF%E7%94%A8-cas-%E6%9D%A5%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</link><pubDate>Wed, 16 Nov 2022 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%9C%A8-java-%E4%B8%AD%E4%BD%BF%E7%94%A8-cas-%E6%9D%A5%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</guid><description>1. 实现队列代码： 使用 head 和 tail 来实现单链表 单链表涉及到两个节点，每次都要判断中间状态 这里使用的是 AtomicReference 来实现的，也可以使用 unsafe 来实现，有兴趣的可以尝试</description></item><item><title>在 java 中使用 Lock 来实现 Semaphore</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%9C%A8-java-%E4%B8%AD%E4%BD%BF%E7%94%A8-lock-%E6%9D%A5%E5%AE%9E%E7%8E%B0-semaphore/</link><pubDate>Mon, 14 Nov 2022 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%9C%A8-java-%E4%B8%AD%E4%BD%BF%E7%94%A8-lock-%E6%9D%A5%E5%AE%9E%E7%8E%B0-semaphore/</guid><description>1. 使用 Lock 来实现 Semaphore代码： Semaphore 的功能就是允许同时有几个线程操作 acquire 方法，permit 会减一，如果为 0，则线程需要等待 release 方法，perm</description></item><item><title>在 java 中使用 CAS 来实现栈2</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%9C%A8-java-%E4%B8%AD%E4%BD%BF%E7%94%A8-cas-%E6%9D%A5%E5%AE%9E%E7%8E%B0%E6%A0%882/</link><pubDate>Sun, 13 Nov 2022 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%9C%A8-java-%E4%B8%AD%E4%BD%BF%E7%94%A8-cas-%E6%9D%A5%E5%AE%9E%E7%8E%B0%E6%A0%882/</guid><description>1. 使用数组来实现栈代码： 用数组来实现 用 CTL 来控制 测试类，参考 ConcurrentStackUsingArrayTest 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 public class ConcurrentStackUsingArray&amp;lt;E&amp;gt;</description></item><item><title>在 java 中如何进行多线程测试</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%9C%A8-java-%E4%B8%AD%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%B5%8B%E8%AF%95/</link><pubDate>Sat, 12 Nov 2022 09:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%9C%A8-java-%E4%B8%AD%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%B5%8B%E8%AF%95/</guid><description>1. java 多线程测试在任何语言中，多线程测试都是比较困难的，在这里我介绍下 java 的多线程测试 jcstress. jcstress 是 OpenJDK 提供的一个测试多线程的框架 主要由多个 Actor 来构成，每个</description></item><item><title>在 java 中使用 CAS 来实现栈</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%9C%A8-java-%E4%B8%AD%E4%BD%BF%E7%94%A8-cas-%E6%9D%A5%E5%AE%9E%E7%8E%B0%E6%A0%88/</link><pubDate>Wed, 09 Nov 2022 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%9C%A8-java-%E4%B8%AD%E4%BD%BF%E7%94%A8-cas-%E6%9D%A5%E5%AE%9E%E7%8E%B0%E6%A0%88/</guid><description>1. 实现简单的 CAS 例子CAS 相信大家都听过，就是 compareAndSet(V expectedValue, V newValue), 真正会用的人很少，这里的难点主要是无阻塞算法。 先实现一个简单 CAS 例子，只具有学习的意义。 getValue:</description></item><item><title>在 java 中如何使用 grpc</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%9C%A8-java-%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-grpc/</link><pubDate>Sat, 22 Oct 2022 09:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%9C%A8-java-%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-grpc/</guid><description>grpc 使用方式grpc 作为一个通信方式，现在可以说是非常流行。如果不会 grpc，你可能跟不上时代了, 这里我只是做一个很简单的例子，并说下如何进一</description></item><item><title>在 java 中如何添加 SQL 日志</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%9C%A8-java-%E4%B8%AD%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0-sql-%E6%97%A5%E5%BF%97/</link><pubDate>Sat, 22 Oct 2022 09:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%9C%A8-java-%E4%B8%AD%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0-sql-%E6%97%A5%E5%BF%97/</guid><description>1. 添加打印 SQL 的方式打印 SQL 的方式有很多，比如有 idea 插件，有 mybatis 拦截器，有代理 datasource, 有代理 driver. 我比较认可的方式就是代理 driver. 这种无任何侵入性。 下面来介绍如何使</description></item><item><title>在 java 中如何解决类冲突问题</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%9C%A8-java-%E4%B8%AD%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E7%B1%BB%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/</link><pubDate>Tue, 18 Oct 2022 09:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%9C%A8-java-%E4%B8%AD%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E7%B1%BB%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/</guid><description>1. 自定义 classloader有时候，我们在项目开发的时候，会遇到比较恶心的问题，存在两个不同 jar 包，但是类的全限定名是一样的，而这两个包都不</description></item><item><title>如何使用 java 中 invoke 包?</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-java-%E4%B8%AD-invoke-%E5%8C%85/</link><pubDate>Mon, 17 Oct 2022 09:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-java-%E4%B8%AD-invoke-%E5%8C%85/</guid><description>1. methodHandle 调用在过去，我们调用一个类的方法，除了直接调用，再就是使用反射来调用了。而今天我要说说 jdk 新引入的方式来调用。 比如我们有一个很简单的 UserService 类。</description></item></channel></rss>