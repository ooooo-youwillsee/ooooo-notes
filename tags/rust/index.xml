<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Rust - 标签 - 线偶的IT笔记</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/tags/rust/</link><description>Rust - 标签 | 线偶的IT笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>297872913@qq.com (线偶)</managingEditor><webMaster>297872913@qq.com (线偶)</webMaster><lastBuildDate>Tue, 09 Jul 2024 08:00:00 +0800</lastBuildDate><atom:link href="https://ooooo-youwillsee.github.io/ooooo-notes/tags/rust/" rel="self" type="application/rss+xml"/><item><title>rust 自定义 macro</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/rust-%E8%87%AA%E5%AE%9A%E4%B9%89-macro/</link><pubDate>Tue, 09 Jul 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/rust-%E8%87%AA%E5%AE%9A%E4%B9%89-macro/</guid><description><![CDATA[实现一个 json! 实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #[derive(Debug, PartialEq)] pub enum Json { Null, Number(f64), Str(String), Array(Vec&lt;Json&gt;), Object(HashMap&lt;String, Json&gt;), } impl From&lt;String&gt; for Json { fn]]></description></item><item><title>rust axum 测试类</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/rust-axum-%E6%B5%8B%E8%AF%95%E7%B1%BB/</link><pubDate>Mon, 10 Jun 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/rust-axum-%E6%B5%8B%E8%AF%95%E7%B1%BB/</guid><description><![CDATA[multipart 测试类 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 const BOUNDARY: &amp;str = &#34;BOUNDARY&#34;; #[tokio::test] async fn test_import_proc_def() -&gt; anyhow::Result&lt;()&gt; { let bytes = fs::read(&#34;./examples/test01.xml&#34;).await?; let request = Request::builder() .header( CONTENT_TYPE, format!(&#34;multipart/form-data; boundary={}&#34;, BOUNDARY), ) .body::&lt;Body&gt;(generate_multipart_data(&#34;file&#34;, &amp;bytes)?.into()) .unwrap(); let multipart = Multipart::from_request(request, &amp;State(())).await?;]]></description></item><item><title>rust openssl 依赖</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/rust-openssl-%E4%BE%9D%E8%B5%96/</link><pubDate>Sun, 09 Jun 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/rust-openssl-%E4%BE%9D%E8%B5%96/</guid><description>在 window 上使用 openssl, 会遇到错误 failed to run custom build command for openssl-sys v0.9.102. 解决方法 下载 vcpkg, 打开 powershell 执行 ./bootstrap-vcpkg.bat 执行 ./vcpkg.exe install openssl:x64-windows-static 配置环境变量 OPENSSL_DIR=C:\Users\ooooo\Development\Vcpkg\installed\x64-windows-static 重新启动项目编译 参考 stackoverflow github</description></item><item><title>rust 常用依赖库</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/rust-%E5%B8%B8%E7%94%A8%E4%BE%9D%E8%B5%96%E5%BA%93/</link><pubDate>Sat, 01 Jun 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/rust-%E5%B8%B8%E7%94%A8%E4%BE%9D%E8%B5%96%E5%BA%93/</guid><description>介绍常用的依赖库，持续更新&amp;hellip; async_trait: 异步支持 once_cell: OnceCell 和 Lazy clap: 命令行支持 axum: http 服务 tokio: 异步运行时 serde: 序列化 serde_json: json 序列化 log: 日志门面 env_logger: 日志实现 anyhow: Result chrono: 日期</description></item><item><title>rust 镜像配置</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/rust-%E9%95%9C%E5%83%8F%E9%85%8D%E7%BD%AE/</link><pubDate>Fri, 24 May 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/rust-%E9%95%9C%E5%83%8F%E9%85%8D%E7%BD%AE/</guid><description>解决 rust 依赖加载太慢的问题。 配置文件 文件路径：用户名/.cargo/config.toml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26</description></item><item><title>从零学 rust</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E4%BB%8E%E9%9B%B6%E5%AD%A6-rust/</link><pubDate>Sun, 12 May 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E4%BB%8E%E9%9B%B6%E5%AD%A6-rust/</guid><description>为什么学 现在 rust 特别火，我觉得有必须学一学，虽然这门语言上手难，一旦学会了写代码的体验非常好。 怎么学 推荐一些资料 Rust程序设计（第2版） Ru</description></item></channel></rss>