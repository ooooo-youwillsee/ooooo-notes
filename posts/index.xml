<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>所有文章 - 线偶的IT笔记</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/posts/</link><description>所有文章 | 线偶的IT笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>297872913@qq.com (线偶)</managingEditor><webMaster>297872913@qq.com (线偶)</webMaster><lastBuildDate>Tue, 14 May 2024 08:00:00 +0800</lastBuildDate><atom:link href="https://ooooo-youwillsee.github.io/ooooo-notes/posts/" rel="self" type="application/rss+xml"/><item><title>spring mvc 请求流程</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/spring-mvc-%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B/</link><pubDate>Tue, 14 May 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/spring-mvc-%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B/</guid><description>spring mvc 原理真的必须懂。 DispatcherServlet源码位置: org.springframework.web.servlet.DispatcherServlet#doDispatch 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37</description></item><item><title>spring cache 原理</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/spring-cache-%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 13 May 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/spring-cache-%E5%8E%9F%E7%90%86/</guid><description>spring cache 是最常见的功能之一，有必要了解其原理。 CacheAutoConfiguration 自动配置类源码位置: org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 // 导入 CacheConfigurationImportSelector 配置类 @Import({ CacheConfigurationImportSelector.class,</description></item><item><title>从零学 rust</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E4%BB%8E%E9%9B%B6%E5%AD%A6-rust/</link><pubDate>Sun, 12 May 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E4%BB%8E%E9%9B%B6%E5%AD%A6-rust/</guid><description>为什么学现在 rust 特别火，我觉得有必须学一学，虽然这门语言上手难，一旦学会了写代码的体验非常好。 怎么学推荐一些资料 Rust程序设计（第2版） Ru</description></item><item><title>常见的限流算法</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%B8%B8%E8%A7%81%E7%9A%84%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95/</link><pubDate>Fri, 12 Apr 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%B8%B8%E8%A7%81%E7%9A%84%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95/</guid><description>固定窗口算法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 type FixedWindowRateLimiter struct { // 固定窗口大小, 单位ms windowInterval time.Duration // 限制 limit int // 窗口开始时间 prevTime time.Time // 当前限制 curLimit int } func (s *FixedWindowRateLimiter) acquire()</description></item><item><title>简单实现 gossip 协议</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0-gossip-%E5%8D%8F%E8%AE%AE/</link><pubDate>Fri, 12 Apr 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0-gossip-%E5%8D%8F%E8%AE%AE/</guid><description>gossip 协议是为实现最终一致性提出的。 实现思路 每个节点都有基本属性，如 id, addr, port。 每个节点都有成员列表 members，存储一部分数据 data。 通</description></item><item><title>04 RedissonSortedSet</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/04-redissonsortedset/</link><pubDate>Thu, 11 Apr 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/04-redissonsortedset/</guid><description>redisson 基于 org.redisson:redisson-spring-data-27:3.27.2 版本 在 java 中，操作 redis 一般都会选择 redisson 框架, 我们需要了解常用功能的实现原理, 这次来介绍 RedissonSortedSet。 使用方式 1 2 3 4</description></item><item><title>05 RedissonPriorityQueue</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/05-redissonpriorityqueue/</link><pubDate>Thu, 11 Apr 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/05-redissonpriorityqueue/</guid><description>redisson 基于 org.redisson:redisson-spring-data-27:3.27.2 版本 在 java 中，操作 redis 一般都会选择 redisson 框架, 我们需要了解常用功能的实现原理, 这次来介绍 RedissonPriorityQueue。 使用方式</description></item><item><title>03 RedissonMultiLock</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/03-redissonmultilock/</link><pubDate>Wed, 10 Apr 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/03-redissonmultilock/</guid><description>redisson 基于 org.redisson:redisson-spring-data-27:3.27.2 版本 在 java 中，操作 redis 一般都会选择 redisson 框架, 我们需要了解常用功能的实现原理, 这次来介绍 RedissonMultiLock。 使用方式 1 2 3 4</description></item><item><title>02 RedissonSpinLock</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/02-redissonspinlock/</link><pubDate>Tue, 09 Apr 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/02-redissonspinlock/</guid><description>redisson 基于 org.redisson:redisson-spring-data-27:3.27.2 版本 在 java 中，操作 redis 一般都会选择 redisson 框架, 我们需要了解常用功能的实现原理, 这次来介绍 RedissonSpinLock。 使用方式 1 2 3 4 5</description></item><item><title>01 RedissonLock</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/01-redissonlock/</link><pubDate>Mon, 08 Apr 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/01-redissonlock/</guid><description>redisson 基于 org.redisson:redisson-spring-data-27:3.27.2 版本 在 java 中，操作 redis 一般都会选择 redisson 框架, 我们需要了解常用功能的实现原理, 这次来介绍 RedissonLock。 使用方式 1 2 3 4 5 6 7 8 9</description></item></channel></rss>