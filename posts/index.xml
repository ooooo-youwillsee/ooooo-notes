<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>所有文章 - 线偶的IT笔记</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/posts/</link><description>所有文章 | 线偶的IT笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>297872913@qq.com (线偶)</managingEditor><webMaster>297872913@qq.com (线偶)</webMaster><lastBuildDate>Fri, 24 May 2024 08:00:00 +0800</lastBuildDate><atom:link href="https://ooooo-youwillsee.github.io/ooooo-notes/posts/" rel="self" type="application/rss+xml"/><item><title>rust 镜像配置</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/rust-%E9%95%9C%E5%83%8F%E9%85%8D%E7%BD%AE/</link><pubDate>Fri, 24 May 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/rust-%E9%95%9C%E5%83%8F%E9%85%8D%E7%BD%AE/</guid><description>解决 rust 依赖加载太慢的问题。 配置文件 文件路径：用户名/.cargo/config.toml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26</description></item><item><title>09 ConcurrentHashMap</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/09-concurrenthashmap/</link><pubDate>Thu, 23 May 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/09-concurrenthashmap/</guid><description><![CDATA[jdk 基于 8 版本 在平时的开发中，我们经常会用到 ConcurrentHashMap, 是并发安全的。 使用方式 1 2 3 4 5 6 7 8 9 10 11 public class ConcurrentHashMapTest { @Test void test() { Map&lt;String, String&gt; map = new ConcurrentHashMap&lt;&gt;(); map.put(&#34;1&#34;, &#34;1&#34;); assertThat(map.get(&#34;1&#34;)).isEqualTo(&#34;1&#34;); map.remove(&#34;1&#34;); assertThat(map.size()).isEqualTo(0); } } put 添加元素]]></description></item><item><title>08 CopyOnWriteArrayList</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/08-copyonwritearraylist/</link><pubDate>Wed, 22 May 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/08-copyonwritearraylist/</guid><description>jdk 基于 8 版本 在平时的开发中，我们经常会用到 CopyOnWriteArrayList, 利用写时复制的机制来保证并发安全, 适合多读少写的场景。 使用方式 1 2 3 4 5 6 7 8 9 10 11 public class CopyOnWriteArrayListTest { @Test public</description></item><item><title>07 ThreadPoolExecutor</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/07-threadpoolexecutor/</link><pubDate>Tue, 21 May 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/07-threadpoolexecutor/</guid><description>jdk 基于 8 版本 在平时的开发中，我们经常会用到 ThreadPoolExecutor, 需要了解源码。 使用方式 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public class ThreadPoolTest { @Test void test() { ThreadPoolExecutor executor = new ThreadPoolExecutor( 2, 10, 60, TimeUnit.SECONDS, new LinkedBlockingQueue&amp;lt;&amp;gt;(), new</description></item><item><title>spring bean 初始化</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/spring-bean-%E5%88%9D%E5%A7%8B%E5%8C%96/</link><pubDate>Tue, 21 May 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/spring-bean-%E5%88%9D%E5%A7%8B%E5%8C%96/</guid><description>spring bean 初始化过程涉及到很多 spring 的扩展接口，源码必懂。 getBean 源码位置: org.springframework.beans.factory.BeanFactory#getBean 1 2 3 4 5 // BeanFactory 是接口，由 AbstractBeanFactory 类来实现 @Override public Object getBean(String name) throws BeansException { return doGetBean(name, null, null, false); } 源码位置: org.springframework.beans.factory.support.AbstractBeanFactory#doGetBean 1 2</description></item><item><title>spring security 原理</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/spring-security-%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 20 May 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/spring-security-%E5%8E%9F%E7%90%86/</guid><description>spring security 的代码比较难，之前我在 ProcessOn 上做了源码导读，所以这里只说关键点。 理解关键点 认证的逻辑有多个 filter 来完成，常用的 filter 如 UsernamePasswor</description></item><item><title>spring websocket 原理</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/spring-websocket-%E5%8E%9F%E7%90%86/</link><pubDate>Sat, 18 May 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/spring-websocket-%E5%8E%9F%E7%90%86/</guid><description>使用示例 例子来自于官网 1 2 3 4 5 6 7 8 9 10 11 12 13 14 @Configuration @EnableWebSocket public class WebSocketConfig implements WebSocketConfigurer { @Override public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) { registry.addHandler(myHandler(), &amp;#34;/myHandler&amp;#34;); } @Bean public WebSocketHandler myHandler() { return new MyHandler(); } } 说明： WebSocketConfigurer 配置 websocket。 WebSocketHandler 处</description></item><item><title>spring 常用扩展点</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/spring-%E5%B8%B8%E7%94%A8%E6%89%A9%E5%B1%95%E7%82%B9/</link><pubDate>Fri, 17 May 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/spring-%E5%B8%B8%E7%94%A8%E6%89%A9%E5%B1%95%E7%82%B9/</guid><description>在 spring 中，最常用的两种扩展就是 BeanFactoryPostProcessor 和 BeanPostProcessor, 当然还有其他的扩展，比如 ApplicationListener, SpringApplicationRunListener 等等。 BeanFactoryPostProcessor 源码位置: org.springframework.beans.factory.config.BeanFactoryPostProcessor 1 2 3 4 5 6 @FunctionalInterface public interface BeanFactoryPostProcessor { // 可以用 beanFactory 来修改 beanDefinition, 注册 singletonBean void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException; }</description></item><item><title>适配多种 servlet 容器</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E9%80%82%E9%85%8D%E5%A4%9A%E7%A7%8D-servlet-%E5%AE%B9%E5%99%A8/</link><pubDate>Thu, 16 May 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E9%80%82%E9%85%8D%E5%A4%9A%E7%A7%8D-servlet-%E5%AE%B9%E5%99%A8/</guid><description>自动配置类 源码位置: org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // 导入 tomcat，jetty，undertow 的配置 @Import({ ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar.class, ServletWebServerFactoryConfiguration.EmbeddedTomcat.class, ServletWebServerFactoryConfiguration.EmbeddedJetty.class, ServletWebServerFactoryConfiguration.EmbeddedUndertow.class }) public class ServletWebServerFactoryAutoConfiguration { @Bean public ServletWebServerFactoryCustomizer servletWebServerFactoryCustomizer(ServerProperties</description></item><item><title>spring boot 启动流程</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/spring-boot-%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</link><pubDate>Wed, 15 May 2024 08:00:00 +0800</pubDate><author>线偶</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/spring-boot-%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</guid><description>spring boot 启动流程必须懂。 启动类示例: 1 2 3 4 5 6 7 8 @SpringBootApplication public class HiApplication { public static void main(String[] args) { // 先执行 SpringApplication 的构造方法，然后执行 run 方法 SpringApplication.run(HiApplication.class, args); } } SpringApplication#run 源码位置: org.springframework.boot.SpringApplication#SpringApplication 1 2 3 4 5 6</description></item></channel></rss>