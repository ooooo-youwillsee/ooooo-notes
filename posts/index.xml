<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - 线偶的IT笔记</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/posts/</link><description>All Posts | 线偶的IT笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>297872913@qq.com (ooooo-youwillsee)</managingEditor><webMaster>297872913@qq.com (ooooo-youwillsee)</webMaster><lastBuildDate>Tue, 13 Sep 2022 10:20:00 +0800</lastBuildDate><atom:link href="https://ooooo-youwillsee.github.io/ooooo-notes/posts/" rel="self" type="application/rss+xml"/><item><title>如何设计一个连接池</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E8%BF%9E%E6%8E%A5%E6%B1%A0/</link><pubDate>Tue, 13 Sep 2022 10:20:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E8%BF%9E%E6%8E%A5%E6%B1%A0/</guid><description>如何设计一个连接池 ? 1. 需求 2. 实现的关键点 3. druid datasource 4. common-pool2</description></item><item><title>如何设计一个对象池</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E6%B1%A0/</link><pubDate>Mon, 12 Sep 2022 10:20:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E6%B1%A0/</guid><description>如何设计一个对象池 ? 1. 需求 2. 简单的实现 3. 实现垃圾回收 软引用，弱引用</description></item><item><title>在 idea 中使用远端 build 和 run</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%9C%A8-idea-%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%BF%9C%E7%AB%AF-build-%E5%92%8C-run/</link><pubDate>Mon, 12 Sep 2022 08:14:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%9C%A8-idea-%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%BF%9C%E7%AB%AF-build-%E5%92%8C-run/</guid><description><![CDATA[<h1 id="在-idea-中使用远端-build-和-run">在 idea 中使用远端 build 和 run</h1>
<p>在 idea 中实际有一个非常有用的功能，那就是<strong>远端构建</strong>和<strong>远端运行</strong>。</p>
<p>在我们实际开发项目中，自己的<strong>本地环境</strong>和<strong>服务器环境</strong>不太一样，例如 go 开发中的 <strong>build-tags</strong>, 还有 c/c++ 开发中的<strong>API 调用</strong>不一样，无法模拟<strong>相同的开发环境</strong>。</p>]]></description></item><item><title>在 spring 中如何扩展现有类的功能</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%9C%A8-spring-%E4%B8%AD%E5%A6%82%E4%BD%95%E6%89%A9%E5%B1%95%E7%8E%B0%E6%9C%89%E7%B1%BB%E7%9A%84%E5%8A%9F%E8%83%BD/</link><pubDate>Mon, 05 Sep 2022 21:09:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%9C%A8-spring-%E4%B8%AD%E5%A6%82%E4%BD%95%E6%89%A9%E5%B1%95%E7%8E%B0%E6%9C%89%E7%B1%BB%E7%9A%84%E5%8A%9F%E8%83%BD/</guid><description>在 spring 中如何扩展现有类的功能 在 spring 中，我们常常会基于现有的代码来扩展之前的功能，或者换一个实现的方式。 1. 原有的功能 在这里基于之前的功能获取属性来</description></item><item><title>在 spring 中如何设计一个获取配置的接口</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%9C%A8-spring-%E4%B8%AD%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E8%8E%B7%E5%8F%96%E9%85%8D%E7%BD%AE%E7%9A%84%E6%8E%A5%E5%8F%A3/</link><pubDate>Mon, 05 Sep 2022 21:09:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%9C%A8-spring-%E4%B8%AD%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E8%8E%B7%E5%8F%96%E9%85%8D%E7%BD%AE%E7%9A%84%E6%8E%A5%E5%8F%A3/</guid><description>在 spring 中如何设计一个获取配置的接口 ? 1. 需求 希望根据 propertyName 来获取相应的 propertyValue, 这个接口需要支持多种数据来源。 2. 设计接口 很明显这个接口应该设计为这样, 有一个</description></item><item><title>在 spring 中有哪些核心类和扩展类</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%9C%A8-spring-%E4%B8%AD%E6%9C%89%E5%93%AA%E4%BA%9B%E6%A0%B8%E5%BF%83%E7%B1%BB%E5%92%8C%E6%89%A9%E5%B1%95%E7%B1%BB/</link><pubDate>Mon, 05 Sep 2022 18:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%9C%A8-spring-%E4%B8%AD%E6%9C%89%E5%93%AA%E4%BA%9B%E6%A0%B8%E5%BF%83%E7%B1%BB%E5%92%8C%E6%89%A9%E5%B1%95%E7%B1%BB/</guid><description>在 spring 中有哪些核心类和扩展类 ? 作为一个 Java 开发，Spring 的技术可以说是必须要掌握的，不仅仅是会使用，而且要掌握原理，学会扩展。 今天我就说说，</description></item><item><title>搭建 tomcat 源码调试环境</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%90%AD%E5%BB%BA-tomcat-%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/</link><pubDate>Wed, 10 Aug 2022 18:32:22 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%90%AD%E5%BB%BA-tomcat-%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/</guid><description>1. 下载代码 1 git clone git@github.com:apache/tomcat.git 2. 安装ant 我本地安装的是 1.10.12 版本, ant 下载地址 配置环境变量 ANT_HOME, 加入到 PATH 环境变量中 执行命令验证 ant -version 3. 导入到 idea 中 1 2 3 4 5 6 7 8 9</description></item><item><title>调试 deployment-controller 的源码</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E8%B0%83%E8%AF%95-deployment-controller-%E7%9A%84%E6%BA%90%E7%A0%81/</link><pubDate>Fri, 15 Jul 2022 18:32:22 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E8%B0%83%E8%AF%95-deployment-controller-%E7%9A%84%E6%BA%90%E7%A0%81/</guid><description>deployment 资源是我们经常需要使用的，也是我们最应该熟悉的源码. 对于调试源码，我使用是 deployment_controller_test.go 测试类， TestSyncDeploymentCreatesReplicaSet 方法. TestSyncDeploymentCreatesReplicaSet 测试方法的结构 源码路径：kubernetes</description></item><item><title>学习 k8s 源码的前置知识</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%AD%A6%E4%B9%A0-k8s-%E6%BA%90%E7%A0%81%E7%9A%84%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/</link><pubDate>Sat, 02 Jul 2022 18:32:22 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%AD%A6%E4%B9%A0-k8s-%E6%BA%90%E7%A0%81%E7%9A%84%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/</guid><description>1. GVK 定义 GVK(group version kind): 资源组、资源版本、资源类型 表示 apps 组下 v1 版本 Deployment 类型的资源。 1 2 apiVersion: apps/v1 kind: Deployment 表示 core 组下 v1 版本 Pod 类型的资源。(没有组信息表示核心组) 1 2</description></item><item><title>搭建 k8s 1.24 版本的源码调试环境</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%90%AD%E5%BB%BA-k8s-1.24-%E7%89%88%E6%9C%AC%E7%9A%84%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/</link><pubDate>Tue, 28 Jun 2022 18:32:22 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%90%AD%E5%BB%BA-k8s-1.24-%E7%89%88%E6%9C%AC%E7%9A%84%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/</guid><description>1. 方法1，在本机的 IDE 来调试源码 如果你是 linux 系统，可以在 linux 中搭建一个 kubernetes 单机的集群，在此系统中安装 IDE(Goland) 来调试. 具体步骤如下： 1. 下载源码 (go 的版本要求 1.18.x)</description></item></channel></rss>