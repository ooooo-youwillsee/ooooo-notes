<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>随笔 - Category - 线偶的IT笔记</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/categories/%E9%9A%8F%E7%AC%94/</link><description>随笔 - Category - 线偶的IT笔记</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>297872913@qq.com (ooooo-youwillsee)</managingEditor><webMaster>297872913@qq.com (ooooo-youwillsee)</webMaster><lastBuildDate>Sun, 29 Jan 2023 08:00:00 +0800</lastBuildDate><atom:link href="https://ooooo-youwillsee.github.io/ooooo-notes/categories/%E9%9A%8F%E7%AC%94/" rel="self" type="application/rss+xml"/><item><title>linux 中的 cgroup 机制</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/linux-%E4%B8%AD%E7%9A%84-cgroup-%E6%9C%BA%E5%88%B6/</link><pubDate>Sun, 29 Jan 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/linux-%E4%B8%AD%E7%9A%84-cgroup-%E6%9C%BA%E5%88%B6/</guid><description>1. 检查 cgroup 的版本 1 2 3 4 5 # check if cgroup is supported cat /proc/filesystems | grep cgroup # check cgroup version cat /proc/mounts | grep cgroup 2. cgroup v2 操作 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # create new dir cd /sys/fs/cgroup mkdir</description></item><item><title>mysql 间隙锁</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/mysql-%E9%97%B4%E9%9A%99%E9%94%81/</link><pubDate>Sat, 28 Jan 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/mysql-%E9%97%B4%E9%9A%99%E9%94%81/</guid><description>1. 准备数据 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # create new schema create schema test; use test; # create table test create table user ( id int primary key, age int ); alter table user add index age_idx (age); # insert some test data insert into user values (3, 10), (5, 20), (8,</description></item><item><title>docker 存储驱动</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/docker-%E5%AD%98%E5%82%A8%E9%A9%B1%E5%8A%A8/</link><pubDate>Tue, 24 Jan 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/docker-%E5%AD%98%E5%82%A8%E9%A9%B1%E5%8A%A8/</guid><description>1. aufs 存储驱动 Ubuntu 22.04 LTS 不支持 aufs 文件系统 参考： ubuntu官方文档 2. overlay2 存储驱动 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # creat dir mkdir lower upper work mnt # mount lower upper work to mnt mount -t overlay -o</description></item><item><title>docker 单主机网络</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/docker-%E5%8D%95%E4%B8%BB%E6%9C%BA%E7%BD%91%E8%B7%AF/</link><pubDate>Fri, 20 Jan 2023 08:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/docker-%E5%8D%95%E4%B8%BB%E6%9C%BA%E7%BD%91%E8%B7%AF/</guid><description>这篇文章主要简述 docker 中的 bridge 网络驱动是如何工作的。 1. 测试一，veth1 (ns1) &amp;mdash; veth2 (ns2) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 # create ns1,</description></item><item><title>搭建 istio 源码调试环境</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%90%AD%E5%BB%BA-istio-%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/</link><pubDate>Mon, 19 Dec 2022 09:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%90%AD%E5%BB%BA-istio-%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/</guid><description>1. 前置条件 安装 docker，必须配置 docker 代理，否则 build 失败。 参考 下载 istio 源码。 安装 go 和 dlv 工具。参考 2. 设置环境变量 1 2 3 4 5 6 7 8 # docker 地址 export HUB=&amp;#34;docker.io/youwillsee&amp;#34; # istio 的</description></item><item><title>设置 docker 代理</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E8%AE%BE%E7%BD%AE-docker-%E4%BB%A3%E7%90%86/</link><pubDate>Sun, 18 Dec 2022 09:00:00 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E8%AE%BE%E7%BD%AE-docker-%E4%BB%A3%E7%90%86/</guid><description><![CDATA[1. 配置 docker 代理 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # 创建配置目录 mkdir -p /etc/systemd/system/docker.service.d # 创建配置文件 vim /etc/systemd/system/docker.service.d/http-proxy.conf # 配置文件内容 [Service] Environment=&#34;HTTP_PROXY=http://ooooo:10800&#34; Environment=&#34;HTTPS_PROXY=http://ooooo:10800&#34; # 重启 docker systemctl daemon-reload &amp;&amp; systemctl restart docker # 查看配置是否生效]]></description></item><item><title>搭建 tomcat 源码调试环境</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%90%AD%E5%BB%BA-tomcat-%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/</link><pubDate>Wed, 10 Aug 2022 18:32:22 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%90%AD%E5%BB%BA-tomcat-%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/</guid><description>1. 下载代码 1 git clone git@github.com:apache/tomcat.git 2. 安装ant 我本地安装的是 1.10.12 版本, ant 下载地址 配置环境变量 ANT_HOME, 加入到 PATH 环境变量中 执行命令验证 ant -version 3. 导入到 idea 中 1 2 3 4 5 6 7 8 9</description></item><item><title>调试 deployment-controller 的源码</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E8%B0%83%E8%AF%95-deployment-controller-%E7%9A%84%E6%BA%90%E7%A0%81/</link><pubDate>Fri, 15 Jul 2022 18:32:22 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E8%B0%83%E8%AF%95-deployment-controller-%E7%9A%84%E6%BA%90%E7%A0%81/</guid><description>deployment 资源是我们经常需要使用的，也是我们最应该熟悉的源码. 对于调试源码，我使用是 deployment_controller_test.go 测试类， TestSyncDeploymentCreatesReplicaSet 方法. TestSyncDeploymentCreatesReplicaSet 测试方法的结构 源码路径：kubernetes</description></item><item><title>学习 k8s 源码的前置知识</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%AD%A6%E4%B9%A0-k8s-%E6%BA%90%E7%A0%81%E7%9A%84%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/</link><pubDate>Sat, 02 Jul 2022 18:32:22 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E5%AD%A6%E4%B9%A0-k8s-%E6%BA%90%E7%A0%81%E7%9A%84%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/</guid><description>1. GVK 定义 GVK(group version kind): 资源组、资源版本、资源类型 表示 apps 组下 v1 版本 Deployment 类型的资源。 1 2 apiVersion: apps/v1 kind: Deployment 表示 core 组下 v1 版本 Pod 类型的资源。(没有组信息表示核心组) 1 2</description></item><item><title>搭建 k8s 1.24 版本的源码调试环境</title><link>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%90%AD%E5%BB%BA-k8s-1.24-%E7%89%88%E6%9C%AC%E7%9A%84%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/</link><pubDate>Tue, 28 Jun 2022 18:32:22 +0800</pubDate><author>ooooo-youwillsee</author><guid>https://ooooo-youwillsee.github.io/ooooo-notes/%E6%90%AD%E5%BB%BA-k8s-1.24-%E7%89%88%E6%9C%AC%E7%9A%84%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/</guid><description>1. 方法1，在本机的 IDE 来调试源码 如果你是 linux 系统，可以在 linux 中搭建一个 kubernetes 单机的集群，在此系统中安装 IDE(Goland) 来调试. 具体步骤如下： 1. 下载源码 (go 的版本要求 1.18.x)</description></item></channel></rss>